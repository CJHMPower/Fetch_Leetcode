//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 219 Contains Duplicate II
// https://leetcode.com//problems/contains-duplicate-ii/description/
// Fetched at 2018-07-24
// Submitted 2 years, 1 month ago
// Runtime: 24 ms
// This solution defeats 29.62% cpp solutions

class Solution {
 public:
  bool containsNearbyDuplicate(vector<int>& nums, int k) {
    if (nums.empty()) {
      return false;
    }
    vector<pair<int, int>> store;
    for (int i = 0; i < nums.size(); i++) {
      store.push_back({i, nums[i]});
    }
    auto compare = [](pair<int, int> a, pair<int, int> b) {
      return (a.second < b.second) ||
             (a.second == b.second && a.first < b.first);
    };
    sort(store.begin(), store.end(), compare);
    pair<int, int> start = store[0];
    for (int i = 1; i < nums.size(); i++) {
      if (store[i].second == start.second &&
          abs(store[i].first - start.first) <= k) {
        return true;
      }
      start = store[i];
    }
    return false;
  }
};