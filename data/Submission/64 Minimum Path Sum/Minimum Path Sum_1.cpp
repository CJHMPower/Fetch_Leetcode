//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 64 Minimum Path Sum
// https://leetcode.com//problems/minimum-path-sum/description/
// Fetched at 2018-07-24
// Submitted 2 years, 2 months ago
// Runtime: 12 ms
// This solution defeats 3.13% cpp solutions

class Solution {
 public:
  int minPathSum(vector<vector<int>>& grid) {
    if (grid.empty()) return 0;
    vector<vector<int>> cost;
    int m = grid.size();
    int n = grid[0].size();
    cost.resize(m);
    for (int i = 0; i < m; i++) cost[i].resize(n);
    cost[m - 1][n - 1] = grid[m - 1][n - 1];
    int i = m - 2;
    while (i >= 0) {
      cost[i][n - 1] = cost[i + 1][n - 1] + grid[i][n - 1];
      i--;
    }
    int j = n - 2;
    while (j >= 0) {
      cost[m - 1][j] = cost[m - 1][j + 1] + grid[m - 1][j];
      j--;
    }
    for (int i = m - 2; i >= 0; i--)
      for (int j = n - 2; j >= 0; j--) {
        if (cost[i][j + 1] > cost[i + 1][j]) {
          cost[i][j] = cost[i + 1][j] + grid[i][j];
        } else
          cost[i][j] = cost[i][j + 1] + grid[i][j];
      }
    return cost[0][0];
  }
};