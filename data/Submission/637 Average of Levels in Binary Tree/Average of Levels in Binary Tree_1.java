// -*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 637 Average of Levels in Binary Tree
// https://leetcode.com//problems/average-of-levels-in-binary-tree/description/
// Fetched at 2018-07-24
// Submitted 1 month, 4 weeks ago
// Runtime: 19 ms
// This solution defeats 2.95% java solutions

/**
 * Definition for a binary tree node. public class TreeNode { int val; TreeNode left; TreeNode
 * right; TreeNode(int x) { val = x; } }
 */
class Solution {
  public List<Double> averageOfLevels(TreeNode root) {
    List<List<Integer>> levels = new ArrayList<List<Integer>>();
    Queue<TreeNode> bfs = new ArrayDeque<TreeNode>();

    bfs.add(root);
    levels.add(new ArrayList<Integer>());

    int n = bfs.size();
    while (!bfs.isEmpty()) {
      TreeNode head = bfs.remove();
      levels.get(levels.size() - 1).add(head.val);
      n--;
      if (head.left != null) bfs.add(head.left);
      if (head.right != null) bfs.add(head.right);
      if (n == 0) {
        levels.add(new ArrayList<Integer>());
        n = bfs.size();
      }
    }
    List<Double> ret = new ArrayList<Double>();
    Double sum = new Double(0);
    for (int i = 0; i < levels.size(); i++) {
      sum = new Double(0);
      for (Integer a : levels.get(i)) {
        sum += a;
      }
      if (levels.get(i).size() > 0) {
        sum /= levels.get(i).size();
        ret.add(sum);
      }
    }
    return ret;
  }
}
