//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 53 Maximum Subarray
// https://leetcode.com//problems/maximum-subarray/description/
// Fetched at 2018-07-24
// Submitted 10 months ago
// Runtime: 13 ms
// This solution defeats 7.08% cpp solutions

class Solution {
 public:
  int maxSubArray(vector<int>& nums) {
    int n = nums.size();
    vector<int> dp(n, 0);
    vector<int> start(n, 0);
    dp[0] = nums[0];
    start[0] = 0;
    for (int i = 1; i < n; i++) {
      if (nums[i] + dp[i - 1] > nums[i]) {
        dp[i] = nums[i] + dp[i - 1];
        start[i] = start[i - 1];
      } else {
        dp[i] = nums[i];
        start[i] = i;
      }
    }
    int max = -pow(2, 31);
    int end_index = 0;
    int start_index = 0;
    for (int i = 0; i < n; i++) {
      if (dp[i] > max) {
        max = dp[i];
        end_index = i;
        start_index = start[i];
      }
    }
    vector<int> ret = {max, start_index, end_index};
    return ret[0];
  }
};