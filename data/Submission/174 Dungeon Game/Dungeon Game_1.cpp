//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 174 Dungeon Game
// https://leetcode.com//problems/dungeon-game/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 9 ms
// This solution defeats 3.4% cpp solutions

class Solution {
 public:
  int calculateMinimumHP(vector<vector<int>>& dungeon) {
    int m = dungeon.size();
    int n = dungeon[0].size();
    vector<vector<int>> dp(m, vector<int>(n, 0));
    dp[m - 1][n - 1] = max(1, 1 - dungeon[m - 1][n - 1]);
    for (int i = n - 2; i >= 0; i--) {
      dp[m - 1][i] = max(1, dp[m - 1][i + 1] - dungeon[m - 1][i]);
    }
    for (int j = m - 2; j >= 0; j--) {
      dp[j][n - 1] = max(1, dp[j + 1][n - 1] - dungeon[j][n - 1]);
    }
    for (int i = m - 2; i >= 0; i--) {
      for (int j = n - 2; j >= 0; j--) {
        dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j]);
      }
    }
    return dp[0][0];
  }
};