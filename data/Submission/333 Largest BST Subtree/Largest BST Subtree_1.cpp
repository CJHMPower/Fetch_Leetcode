//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 333 Largest BST Subtree
// https://leetcode.com//problems/largest-bst-subtree/description/
// Fetched at 2018-07-24
// Submitted 5 months ago
// Runtime: 10 ms
// This solution defeats 3.43% cpp solutions

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
 public:
  int IsBST(TreeNode *root, int &ret) {
    if (root == NULL) {
      return 0;
    }
    if (root->left == NULL && root->right == NULL) {
      ret = max(ret, 1);
      return 1;
    }
    int left = IsBST(root->left, ret);
    int right = IsBST(root->right, ret);

    if ((root->left != NULL && left == 0) ||
        (root->right != NULL && right == 0)) {
      return 0;
    }
    ret = max(ret, max(left, right));
    TreeNode *p1 = root->left;
    TreeNode *pre = NULL;
    while (p1) {
      pre = p1;
      p1 = p1->right;
    }

    if (pre != NULL && pre->val >= root->val) {
      return 0;
    }
    TreeNode *p2 = root->right;
    pre = NULL;
    while (p2) {
      pre = p2;
      p2 = p2->left;
    }
    if (pre != NULL && pre->val <= root->val) {
      return 0;
    }
    ret = max(ret, 1 + left + right);
    return 1 + left + right;
  }
  int largestBSTSubtree(TreeNode *root) {
    int ret = 0;
    IsBST(root, ret);
    return ret;
  }
};