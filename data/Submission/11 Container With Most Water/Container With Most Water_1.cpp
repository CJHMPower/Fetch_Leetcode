//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 11 Container With Most Water
// https://leetcode.com//problems/container-with-most-water/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 443 ms
// This solution defeats 5.05% cpp solutions

class Solution {
 public:
  int maxArea(vector<int>& height) {
    int l = 0, r = height.size() - 1;
    int record = 0;
    int old = min(height[r], height[l]) * (r - l);
    while (l < r) {
      if (height[l] < height[r]) {
        old = height[l] * (r - l);
        int k = l + 1;
        int indexk = l;
        while (k < r) {
          if ((r - k) * min(height[k], height[r]) > old) {
            old = (r - k) * min(height[k], height[r]);
            indexk = k;
          }
          k++;
        }
        if (indexk > l)
          l = indexk;
        else {
          record = max(record, old);
          l++;
          r--;
        }
      } else if (height[l] > height[r]) {
        old = height[r] * (r - l);
        int k = r - 1;
        int indexk = r;
        while (k > l) {
          if ((k - l) * min(height[l], height[k]) > old) {
            old = (k - l) * min(height[l], height[k]);
            indexk = k;
          }
          k--;
        }
        if (indexk < r) {
          r = indexk;
        } else {
          record = max(record, old);
          l++;
          r--;
        }
      } else {
        record = max(record, height[r] * (r - l));
        l++;
        r--;
      }
    }
    return max(old, record);
  }
};