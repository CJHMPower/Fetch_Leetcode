// -*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 692 Top K Frequent Words
// https://leetcode.com//problems/top-k-frequent-words/description/
// Fetched at 2018-07-24
// Submitted 4 weeks, 1 day ago
// Runtime: 18 ms
// This solution defeats 53.16% java solutions

class Solution {
  public List<String> topKFrequent(String[] words, int k) {
    HashMap<String, Integer> map = new HashMap<>();
    PriorityQueue<Integer> pq = new PriorityQueue<>();
    TreeMap<Integer, List<String>> treemap =
        new TreeMap<>(
            new Comparator<Integer>() {
              public int compare(Integer o1, Integer o2) {
                return Integer.compare(o2, o1);
              }
            });
    for (String word : words) {
      if (!map.containsKey(word)) map.put(word, 1);
      else map.put(word, map.get(word) + 1);
    }
    int count = 0;
    for (String word : map.keySet()) {
      count = map.get(word);
      if (pq.size() < k || count >= pq.peek()) {
        pq.add(count);
        if (pq.size() > k) pq.poll();
        List<String> list;
        if (!treemap.containsKey(count)) {
          list = new ArrayList<String>();
        } else {
          list = treemap.get(count);
        }
        list.add(word);
        treemap.put(count, list);
      }
    }
    int i = 0;
    List<String> ret = new ArrayList<>();
    for (Integer num : treemap.keySet()) {
      List<String> list = treemap.get(num);
      Collections.sort(list);
      for (String word : list) {
        if (i < k) {
          ret.add(word);
          i++;
        } else {
          return ret;
        }
      }
    }
    return ret;
  }
}
