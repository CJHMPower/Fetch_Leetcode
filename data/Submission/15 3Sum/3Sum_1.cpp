//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 15 3Sum
// https://leetcode.com//problems/3sum/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 56 ms
// This solution defeats 100.0% cpp solutions

class Solution {
 public:
  vector<vector<int>> threeSum(vector<int>& nums) {
    sort(nums.begin(), nums.end());
    vector<vector<int>> result;
    int low, high, target;
    for (int i = 0; i < nums.size(); i++) {
      target = 0 - nums[i];
      if (i > 0 && nums[i] == nums[i - 1]) {
        continue;
      }
      low = i + 1;
      high = nums.size() - 1;
      while (high > low) {
        while (low > i + 1 && nums[low] == nums[low - 1]) {
          low++;
        }
        while (high < nums.size() - 1 && nums[high] == nums[high + 1]) {
          high--;
        }
        if (!(high > low)) {
          break;
        }
        if (nums[low] + nums[high] == target) {
          result.push_back({nums[i], nums[low], nums[high]});
          low++;
          high--;
        } else if (nums[low] + nums[high] < target) {
          low++;
        } else {
          high--;
        }
      }
    }
    return result;
  }
};