//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 135 Candy
// https://leetcode.com//problems/candy/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 46 ms
// This solution defeats 9.59% cpp solutions

class Solution {
 public:
  int candy(vector<int>& ratings) {
    vector<int> dp(ratings.size(), 1);
    bool flag = true;
    vector<int> temp = ratings;
    if (unique(temp.begin(), temp.end()) == temp.end() &&
        is_sorted(ratings.begin(), ratings.end())) {
      int n = ratings.size();
      return n * (n + 1) / 2;
    }
    for (int j = 0; j < ratings.size(); j++) {
      flag = true;
      for (int i = dp.size() - 1; i - 1 >= 0; i--) {
        if (ratings[i - 1] > ratings[i] && dp[i - 1] <= dp[i]) {
          dp[i - 1] = dp[i] + 1;
          flag = false;
        } else if (ratings[i] > ratings[i - 1] && dp[i] <= dp[i - 1]) {
          dp[i] = dp[i - 1] + 1;
          flag = false;
        }
      }
      if (flag == true) {
        break;
      }
    }
    return accumulate(dp.begin(), dp.end(), 0);
  }
};