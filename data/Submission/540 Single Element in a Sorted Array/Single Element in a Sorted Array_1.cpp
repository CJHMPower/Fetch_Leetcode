//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 540 Single Element in a Sorted Array
// https://leetcode.com//problems/single-element-in-a-sorted-array/description/
// Fetched at 2018-07-24
// Submitted 5 months ago
// Runtime: 6 ms
// This solution defeats 1.83% cpp solutions

class Solution {
 public:
  int singleNonDuplicate(vector<int>& nums) {
    int low = 0, high = nums.size() - 1;
    int mid;
    while (low <= high) {
      mid = (low + high) / 2;
      if ((mid - 1 < 0 && nums[mid] != nums[mid + 1]) ||
          (mid + 1 >= nums.size() && nums[mid - 1] != nums[mid]) ||
          (nums[mid - 1] != nums[mid] && nums[mid] != nums[mid + 1])) {
        return nums[mid];
      }
      if (mid % 2 == 1) {
        if (nums[mid - 1] == nums[mid]) {
          low = mid + 1;
        } else {
          high = mid - 2;
        }
      } else if (nums[mid] == nums[mid + 1]) {
        low = mid + 2;
      } else {
        high = mid - 1;
      }
    }
    return nums[low];
  }
};