// -*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 598 Range Addition II
// https://leetcode.com//problems/range-addition-ii/description/
// Fetched at 2018-07-24
// Submitted 1 week, 2 days ago
// Runtime: 3 ms
// This solution defeats 100.0% java solutions

class Solution {
  public int maxCount(int m, int n, int[][] ops) {
    int min_x = m, min_y = n;
    for (int i = 0; i < ops.length; i++) {
      if (ops[i][0] < min_x) min_x = ops[i][0];
      if (ops[i][1] < min_y) min_y = ops[i][1];
    }
    return min_x * min_y;
  }
}
