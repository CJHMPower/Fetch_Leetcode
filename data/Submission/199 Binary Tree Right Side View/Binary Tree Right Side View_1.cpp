//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 199 Binary Tree Right Side View
// https://leetcode.com//problems/binary-tree-right-side-view/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 7 ms

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
 public:
  vector<int> rightSideView(TreeNode* root) {
    vector<int> result;
    if (root == nullptr) {
      return result;
    }
    vector<TreeNode*> Q1;
    vector<TreeNode*> Q2;
    Q1.push_back(root);
    while (!Q1.empty()) {
      result.push_back(Q1[Q1.size() - 1]->val);
      for (auto v : Q1) {
        if (v->left != nullptr) {
          Q2.push_back(v->left);
        }
        if (v->right != nullptr) {
          Q2.push_back(v->right);
        }
      }
      swap(Q1, Q2);
      Q2.clear();
    }
    return result;
  }
};