//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 327 Count of Range Sum
// https://leetcode.com//problems/count-of-range-sum/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 163 ms
// This solution defeats 1.27% cpp solutions

class Solution {
 public:
  int searchInsertF(vector<int>& nums, long long int target) {
    int low = 0, high = nums.size() - 1;
    int mid;
    while (low <= high) {
      mid = (low + high) / 2;
      if (nums[mid] == target) {
        while (mid >= 0 && nums[mid] == target) {
          mid--;
        }
        return mid + 1;
      } else if (nums[mid] > target) {
        high = mid - 1;
      } else {
        low = mid + 1;
      }
    }
    return low;
  }
  int searchInsertL(vector<int>& nums, long long int target) {
    int low = 0, high = nums.size() - 1;
    int mid;
    while (low <= high) {
      mid = (low + high) / 2;
      if (nums[mid] == target) {
        while (mid < nums.size() && nums[mid] == target) {
          mid++;
        }
        return mid - 1;
      } else if (nums[mid] > target) {
        high = mid - 1;
      } else {
        low = mid + 1;
      }
    }
    return high;
  }
  int count_range(vector<int>& nums, long long int lower, long long int upper) {
    int low = searchInsertF(nums, lower);
    int high = searchInsertL(nums, upper);
    return high - low + 1;
  }
  int helper(vector<int>& nums, int start, int end, int lower, int upper) {
    if (start == end) {
      if (nums[start] <= upper && nums[start] >= lower) {
        return 1;
      } else {
        return 0;
      }
    }
    int mid = (start + end) / 2;
    int p1 = helper(nums, start, mid, lower, upper);
    int p2 = helper(nums, mid + 1, end, lower, upper);
    vector<int> pre(mid - start + 1, 0);
    vector<int> back(end - mid, 0);
    pre[pre.size() - 1] = nums[mid];
    for (int i = pre.size() - 2; i >= 0; i--) {
      pre[i] = pre[i + 1] + nums[start + i];
    }
    back[0] = nums[mid + 1];
    for (int j = 1; j < back.size(); j++) {
      back[j] = back[j - 1] + nums[j + mid + 1];
    }
    sort(pre.begin(), pre.end());
    sort(back.begin(), back.end());
    int count = 0;
    for (int i = 0; i < pre.size(); i++) {
      long long int para = pre[i];
      count +=
          min(count_range(back, lower - para, upper - para), int(back.size()));
    }
    return count + p1 + p2;
  }
  int countRangeSum(vector<int>& nums, int lower, int upper) {
    if (nums.empty()) {
      return 0;
    }
    return helper(nums, 0, nums.size() - 1, lower, upper);
  }
};