//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 227 Basic Calculator II
// https://leetcode.com//problems/basic-calculator-ii/description/
// Fetched at 2018-07-24
// Submitted 2 years, 1 month ago
// Runtime: 104 ms
// This solution defeats 9.24% cpp solutions

class Solution {
 public:
  int Eval(int a, int b, char c) {
    switch (c) {
      case '+':
        return a + b;
      case '-':
        return a - b;
      case '*':
        return a * b;
      case '/':
        return a / b;
    }
    return a + b;
  }
  bool compare(char a, char b) {
    if (b == '-' || b == '+') {
      return false;
    }
    if ((b == '*' || b == '/') && (a == '+' || a == '-')) {
      return true;
    }
    return false;
  }
  int calculate(string s) {
    stack<char> oper;
    stack<int> number;
    int i = 0;
    while (i < s.size()) {
      if (s[i] == ' ') {
        i++;
        continue;
      }
      if (s[i] >= '0' && s[i] <= '9') {
        int j = i;
        do
          i++;
        while (i < s.size() && s[i] >= '0' && s[i] <= '9');
        istringstream ss;
        ss.str(s.substr(j, i - j));
        int digit;
        ss >> digit;
        if (oper.empty() || number.empty()) {
          number.push(digit);
        } else {
          int oper1 = oper.top();
          if (oper1 == '*' || oper1 == '/') {
            int num1 = number.top();
            number.pop();
            oper.pop();
            number.push(Eval(num1, digit, oper1));
          } else {
            number.push(digit);
          }
        }
        i--;
      } else {
        if (oper.empty()) {
          oper.push(s[i]);
        } else if (compare(oper.top(), s[i]) == false) {
          int num1 = number.top();
          number.pop();
          int num2 = number.top();
          number.pop();
          char c = oper.top();
          oper.pop();
          number.push(Eval(num2, num1, c));
          oper.push(s[i]);
        } else {
          oper.push(s[i]);
        }
      }
      i++;
    }
    while (!oper.empty()) {
      int num1 = number.top();
      number.pop();
      int num2 = number.top();
      number.pop();
      char c = oper.top();
      oper.pop();
      number.push(Eval(num2, num1, c));
    }
    return number.top();
  }
};