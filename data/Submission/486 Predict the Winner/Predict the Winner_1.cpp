//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 486 Predict the Winner
// https://leetcode.com//problems/predict-the-winner/description/
// Fetched at 2018-07-24
// Submitted 4 months, 2 weeks ago
// Runtime: 57 ms
// This solution defeats 10.07% cpp solutions

class Solution {
 public:
  pair<int, int> max_score(vector<int>& nums, int low, int high) {
    if (high - low == 1) {
      if (nums[low] > nums[high]) {
        return make_pair(nums[low], nums[high]);
      } else {
        return make_pair(nums[high], nums[low]);
      }
    }
    auto start_score = max_score(nums, low + 1, high);
    auto end_score = max_score(nums, low, high - 1);
    int start = start_score.second + nums[low];
    int end = end_score.second + nums[high];
    if (start > end) {
      return make_pair(start, start_score.first);
    } else {
      return make_pair(end, end_score.first);
    }
  }
  bool PredictTheWinner(vector<int>& nums) {
    if (nums.size() < 3) {
      return true;
    }
    auto score = max_score(nums, 0, nums.size() - 1);
    return score.first >= score.second;
  }
};