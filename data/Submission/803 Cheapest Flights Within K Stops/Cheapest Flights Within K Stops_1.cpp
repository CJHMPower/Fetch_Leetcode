//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 803 Cheapest Flights Within K Stops
// https://leetcode.com//problems/cheapest-flights-within-k-stops/description/
// Fetched at 2018-07-24
// Submitted 2 months, 1 week ago
// Runtime: 20 ms
// This solution defeats 22.15% cpp solutions

class Solution {
 public:
  int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst,
                        int K) {
    vector<vector<pair<int, int>>> edges(n, vector<pair<int, int>>());
    for (auto u : flights) {
      edges[u[0]].push_back(make_pair(u[1], u[2]));
    }

    queue<pair<int, int>> bfs;
    int stops = 0;
    bfs.push(make_pair(src, 0));
    int ret = INT_MAX;
    int nn = bfs.size(), i = 0;
    while (!bfs.empty()) {
      auto top = bfs.front();
      bfs.pop();
      i++;
      for (auto u : edges[top.first]) {
        int val = u.second + top.second;
        if (val > ret) {
          continue;
        }
        bfs.push(make_pair(u.first, val));
        if (u.first == dst) {
          ret = min(ret, val);
        }
      }
      if (nn == i) {
        stops++;
        if (stops > K) {
          break;
        }
        i = 0;
        nn = bfs.size();
      }
    }
    if (ret == INT_MAX) {
      return -1;
    }
    return ret;
  }
};