//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 274 H-Index
// https://leetcode.com//problems/h-index/description/
// Fetched at 2018-07-24
// Submitted 2 years, 1 month ago
// Runtime: 8 ms
// This solution defeats 1.85% cpp solutions

class Solution {
 public:
  void quick_sort(vector<int>& a, int p, int r) {
    if (p < r) {
      int i = p - 1, j = r + 1;
      int x = a[p];
      while (true) {
        do
          j--;
        while (a[j] > x);
        do
          i++;
        while (a[i] < x);
        if (i < j) {
          int temp = a[i];
          a[i] = a[j];
          a[j] = temp;
        } else
          break;
      }
      quick_sort(a, p, j - 1);
      quick_sort(a, j + 1, r);
    }
  }
  int hIndex(vector<int>& citations) {
    if (citations.empty()) {
      return 0;
    }
    vector<int> temp = citations;
    sort(temp.begin(), temp.end());
    if (*(temp.end() - 1) == 0) {
      return 0;
    }
    map<int, int> table;
    for (int i = 0; i < citations.size(); i++) {
      if (table.find(temp[i]) == table.end()) {
        table.insert({temp[i], citations.size() - i});
      } else
        continue;
    }
    int max = 0;
    for (auto it = table.begin(); it != table.end(); it++) {
      if (min(it->first, it->second) > max) {
        max = min(it->first, it->second);
      }
    }
    return max > 1 ? max : 1;
  }
};