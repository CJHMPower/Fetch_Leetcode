//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 382 Linked List Random Node
// https://leetcode.com//problems/linked-list-random-node/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 216 ms

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
 public:
  /** @param head The linked list's head.
      Note that the head is guaranteed to be not null, so it contains at least
     one node. */
  Solution(ListNode* head) { h = head; }

  /** Returns a random node's value. */
  int getRandom() {
    ListNode* p = h->next;
    static uniform_real_distribution<double> u(0, 1);
    static default_random_engine e;
    int i = 2;
    double t;
    ListNode* choice = h;
    while (p) {
      t = u(e);
      if (t < 1.0 / i) {
        choice = p;
      }
      i++;
      p = p->next;
    }
    return choice->val;
  }
  ListNode* h;
};

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(head);
 * int param_1 = obj.getRandom();
 */