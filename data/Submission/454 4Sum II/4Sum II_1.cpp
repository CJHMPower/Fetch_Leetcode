//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 454 4Sum II
// https://leetcode.com//problems/4sum-ii/description/
// Fetched at 2018-07-24
// Submitted 2 months, 2 weeks ago
// Runtime: 520 ms
// This solution defeats 2.59% cpp solutions

class Solution {
 public:
  int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C,
                   vector<int>& D) {
    int n = A.size();
    map<int, int> hash_C;
    map<int, int> hash_D;
    for (int i = 0; i < n; i++) {
      if (hash_C.find(C[i]) == hash_C.end()) hash_C[C[i]] = 0;
      hash_C[C[i]]++;
      if (hash_D.find(D[i]) == hash_D.end()) hash_D[D[i]] = 0;
      hash_D[D[i]]++;
    }
    map<int, int> hash_CD;
    for (auto it1 = hash_C.begin(); it1 != hash_C.end(); it1++) {
      for (auto it2 = hash_D.begin(); it2 != hash_D.end(); it2++) {
        if (hash_CD.find(it1->first + it2->first) == hash_CD.end()) {
          hash_CD[it1->first + it2->first] = 0;
        }
        hash_CD[it1->first + it2->first] += it1->second * it2->second;
      }
    }

    int a = 0, b = 0, c = n - 1, d = n - 1;
    int ret = 0;
    int target;
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        target = -(A[i] + B[j]);
        if (hash_CD.find(target) != hash_CD.end()) {
          ret += hash_CD[target];
        }
      }
    }
    return ret;
  }
};