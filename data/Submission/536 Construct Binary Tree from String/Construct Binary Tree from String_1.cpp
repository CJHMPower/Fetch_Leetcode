//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 536 Construct Binary Tree from String
// https://leetcode.com//problems/construct-binary-tree-from-string/description/
// Fetched at 2018-07-24
// Submitted 3 months ago
// Runtime: 50 ms
// This solution defeats 3.23% cpp solutions

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
 public:
  TreeNode* str2tree(string s) {
    if (s.empty()) {
      return NULL;
    }
    int i = 0;
    while (i < s.size() && s[i] != '(') {
      i++;
    }
    TreeNode* root = (TreeNode*)malloc(sizeof(TreeNode));
    root->val = stoi(s.substr(0, i));
    int left = 0;
    int left_start = i + 1;
    if (i < s.size()) {
      left++;
      i++;
    } else {
      root->left = NULL;
      root->right = NULL;
      return root;
    }
    while (i < s.size() && left > 0) {
      if (s[i] == '(') {
        left++;
      } else if (s[i] == ')') {
        left--;
      }
      i++;
    }
    if (i - 1 - left_start > 0 && left_start < s.size()) {
      root->left = str2tree(s.substr(left_start, i - 1 - left_start));
    } else {
      root->right = NULL;
    }
    if (s.size() - i - 2 > 0 && i + 1 < s.size()) {
      root->right = str2tree(s.substr(i + 1, s.size() - i - 2));
    } else {
      root->right = NULL;
    }
    return root;
  }
};