//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 542 01 Matrix
// https://leetcode.com//problems/01-matrix/description/
// Fetched at 2018-07-24
// Submitted 5 months ago
// Runtime: 228 ms
// This solution defeats 4.25% cpp solutions

class Solution {
 public:
  vector<vector<int>> updateMatrix(vector<vector<int>>& matrix) {
    int m = matrix.size();
    int n = matrix[0].size();
    vector<vector<int>> ret(m, vector<int>(n, INT_MAX - 1));

    for (int i = 0; i < m; i++) {
      for (int j = 0; j < n; j++) {
        if (matrix[i][j] == 0) {
          ret[i][j] = 0;
          continue;
        }
        if (i - 1 >= 0) {
          ret[i][j] = min(ret[i][j], ret[i - 1][j] + 1);
        }
        if (j - 1 >= 0) {
          ret[i][j] = min(ret[i][j], ret[i][j - 1] + 1);
        }
        if (i + 1 < m) {
          ret[i][j] = min(ret[i][j], ret[i + 1][j] + 1);
        }
        if (j + 1 < n) {
          ret[i][j] = min(ret[i][j], ret[i][j + 1] + 1);
        }
      }
    }
    for (int i = m - 1; i >= 0; i--) {
      for (int j = n - 1; j >= 0; j--) {
        if (matrix[i][j] == 0) continue;
        if (i - 1 >= 0) {
          ret[i][j] = min(ret[i][j], ret[i - 1][j] + 1);
        }
        if (j - 1 >= 0) {
          ret[i][j] = min(ret[i][j], ret[i][j - 1] + 1);
        }
        if (i + 1 < m) {
          ret[i][j] = min(ret[i][j], ret[i + 1][j] + 1);
        }
        if (j + 1 < n) {
          ret[i][j] = min(ret[i][j], ret[i][j + 1] + 1);
        }
      }
    }

    return ret;
  }
};