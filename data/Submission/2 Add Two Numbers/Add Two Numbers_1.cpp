//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 2 Add Two Numbers
// https://leetcode.com//problems/add-two-numbers/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 44 ms
// This solution defeats 4.15% cpp solutions

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
 public:
  ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
    long long int num1 = 0, num2 = 0;
    if (l1 == nullptr) {
      return l2;
    }
    if (l2 == nullptr) {
      return l1;
    }
    ListNode* p1 = l1;
    ListNode* p2 = l2;
    int i = 0;
    while (p1 != nullptr) {
      num1 += pow(10, i) * p1->val;
      p1 = p1->next;
      i++;
    }
    i = 0;
    while (p2 != nullptr) {
      num2 += pow(10, i) * p2->val;
      p2 = p2->next;
      i++;
    }
    long long int result = num1 + num2;
    ListNode* head = nullptr;
    ListNode* tails = nullptr;
    if (result == 0) {
      head = (ListNode*)malloc(sizeof(ListNode));
      head->val = 0;
      head->next = nullptr;
      return head;
    }
    while (result) {
      int digit = result % 10;
      result /= 10;
      if (tails == nullptr) {
        tails = (ListNode*)malloc(sizeof(ListNode));
        tails->val = digit;
        tails->next = nullptr;
        head = tails;
      } else {
        ListNode* p = (ListNode*)malloc(sizeof(ListNode));
        p->val = digit;
        p->next = nullptr;
        tails->next = p;
        tails = p;
      }
    }
    return head;
  }
};