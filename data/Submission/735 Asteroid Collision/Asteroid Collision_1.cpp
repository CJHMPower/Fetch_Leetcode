//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 735 Asteroid Collision
// https://leetcode.com//problems/asteroid-collision/description/
// Fetched at 2018-07-24
// Submitted 2 months, 1 week ago
// Runtime: 32 ms
// This solution defeats 4.21% cpp solutions

class Solution {
 public:
  vector<int> asteroidCollision(vector<int>& asteroids) {
    stack<int> s;
    vector<int> ret;
    int start = -1;
    for (int i = 0; i < asteroids.size(); i++) {
      if (asteroids[i] > 0) {
        s.push(asteroids[i]);
        start = i;
        break;
      } else {
        ret.push_back(asteroids[i]);
      }
    }
    if (start == -1) {
      return ret;
    }
    for (int i = start + 1; i < asteroids.size(); i++) {
      if (asteroids[i] > 0) {
        s.push(asteroids[i]);
      } else {
        bool collide = false;
        while (!s.empty()) {
          if (s.top() < abs(asteroids[i])) {
            s.pop();
          } else if (s.top() == abs(asteroids[i])) {
            s.pop();
            collide = true;
            break;
          } else {
            collide = true;
            break;
          }
        }
        if (collide == false) {
          ret.push_back(asteroids[i]);
        }
      }
    }
    vector<int> temp;

    while (s.size() > 0) {
      temp.push_back(s.top());

      s.pop();
    }

    for (int i = 0; i < temp.size(); i++) {
      ret.push_back(temp[temp.size() - 1 - i]);
    }
    return ret;
  }
};