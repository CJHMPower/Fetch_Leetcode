//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 21 Merge Two Sorted Lists
// https://leetcode.com//problems/merge-two-sorted-lists/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 16 ms

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
 public:
  ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
    ListNode* head = nullptr;
    ListNode* tails = head;
    ListNode* p1 = l1;
    ListNode* p2 = l2;
    while (p1 != nullptr && p2 != nullptr) {
      ListNode* p = (ListNode*)malloc(sizeof(ListNode));
      if (p1->val < p2->val) {
        p->val = p1->val;
        p1 = p1->next;
      } else {
        p->val = p2->val;
        p2 = p2->next;
      }
      p->next = nullptr;
      if (tails == nullptr) {
        tails = p;
        head = tails;
      } else {
        tails->next = p;
        tails = p;
      }
    }
    while (p1 != nullptr) {
      ListNode* p = (ListNode*)malloc(sizeof(ListNode));
      p->val = p1->val;
      p->next = nullptr;
      if (tails == nullptr) {
        tails = p;
        head = tails;
      } else {
        tails->next = p;
        tails = p;
      }
      p1 = p1->next;
    }
    while (p2 != nullptr) {
      ListNode* p = (ListNode*)malloc(sizeof(ListNode));
      p->val = p2->val;
      p->next = nullptr;
      if (tails == nullptr) {
        tails = p;
        head = tails;
      } else {
        tails->next = p;
        tails = p;
      }
      p2 = p2->next;
    }
    return head;
  }
};