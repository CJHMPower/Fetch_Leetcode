//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 36 Valid Sudoku
// https://leetcode.com//problems/valid-sudoku/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 12 ms
// This solution defeats 97.06% cpp solutions

class Solution {
 public:
  bool isValidSudoku(vector<vector<char>>& board) {
    int* hash = new int[10];
    for (int i = 0; i < board.size(); i++) {
      memset(hash, 0, sizeof(int) * 10);
      for (int j = 0; j < board[i].size(); j++) {
        if (board[i][j] == '.')
          continue;
        else {
          hash[board[i][j] - '0']++;
          if (hash[board[i][j] - '0'] > 1) {
            return false;
          }
        }
      }
    }
    for (int i = 0; i < board[0].size(); i++) {
      memset(hash, 0, sizeof(int) * 10);
      for (int j = 0; j < board.size(); j++) {
        if (board[j][i] == '.')
          continue;
        else {
          hash[board[j][i] - '0']++;
          if (hash[board[j][i] - '0'] > 1) {
            return false;
          }
        }
      }
    }
    for (int i = 0; i <= 6; i += 3) {
      for (int j = 0; j <= 6; j += 3) {
        memset(hash, 0, sizeof(int) * 10);
        for (int m = 0; m < 3; m++)
          for (int n = 0; n < 3; n++) {
            if (board[i + m][j + n] == '.')
              continue;
            else {
              hash[board[i + m][j + n] - '0']++;
              if (hash[board[i + m][j + n] - '0'] > 1) {
                return false;
              }
            }
          }
      }
    }
    return true;
  }
};