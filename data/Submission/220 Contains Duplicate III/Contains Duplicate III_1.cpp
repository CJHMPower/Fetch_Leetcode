//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 220 Contains Duplicate III
// https://leetcode.com//problems/contains-duplicate-iii/description/
// Fetched at 2018-07-24
// Submitted 2 years, 1 month ago
// Runtime: 24 ms
// This solution defeats 10.58% cpp solutions

class Solution {
 public:
  bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {
    vector<pair<long long int, long long int>> arr;
    auto compare = [](pair<long long int, long long int> a,
                      pair<long long int, long long int> b) {
      return (a.second < b.second) ||
             (a.second == b.second && a.first < b.first);
    };
    for (int i = 0; i < nums.size(); i++) {
      arr.push_back({i, nums[i]});
    }
    sort(arr.begin(), arr.end(), compare);
    for (int i = 0; i < arr.size(); i++) {
      int j = i + 1;
      while (j < arr.size() && abs(arr[j].second - arr[i].second) <= t) {
        if (abs(arr[i].first - arr[j].first) <= k) {
          return true;
        }
        j++;
      }
    }
    return false;
  }
};