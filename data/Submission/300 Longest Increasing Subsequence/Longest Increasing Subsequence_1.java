// -*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 300 Longest Increasing Subsequence
// https://leetcode.com//problems/longest-increasing-subsequence/description/
// Fetched at 2018-07-24
// Submitted 1 month, 2 weeks ago
// Runtime: 14 ms
// This solution defeats 55.99% java solutions

class Solution {

  public int lengthOfLIS(int[] nums) {
    if (nums.length == 0) {
      return 0;
    }

    int[] dp = new int[nums.length];
    dp[0] = 1;
    int max, ret = 1;
    for (int i = 1; i < nums.length; i++) {
      max = 0;
      for (int j = i - 1; j >= 0; j--) {
        if (nums[j] < nums[i]) {
          max = Math.max(max, dp[j]);
        }
      }
      dp[i] = max + 1;
      ret = Math.max(ret, dp[i]);
    }
    return ret;
  }
}
