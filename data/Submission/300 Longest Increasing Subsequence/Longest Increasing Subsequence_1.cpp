//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 300 Longest Increasing Subsequence
// https://leetcode.com//problems/longest-increasing-subsequence/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 119 ms
// This solution defeats 1.75% cpp solutions

class Solution {
 public:
  int lengthOfLIS(vector<int>& nums) {
    if (nums.empty()) {
      return 0;
    }
    vector<int> LIS(nums.size(), 1);
    for (int i = 1; i < nums.size(); i++) {
      for (int j = 0; j < i; j++) {
        if (nums[i] > nums[j]) {
          LIS[i] = max(LIS[i], LIS[j] + 1);
        }
      }
    }
    int result = 1;
    for (int i = 0; i < LIS.size(); i++) {
      result = max(result, LIS[i]);
    }
    return result;
  }
};