//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 300 Longest Increasing Subsequence
// https://leetcode.com//problems/longest-increasing-subsequence/description/
// Fetched at 2018-07-24
// Submitted 2 years, 1 month ago
// Runtime: 4 ms
// This solution defeats 67.64% cpp solutions

class Solution {
 public:
  int lengthOfLIS(vector<int>& nums) {
    if (nums.empty()) return 0;
    int result = 1;
    vector<int> max_val(nums.size() + 1);
    max_val[0] = -pow(10, 7);
    max_val[1] = nums[0];
    vector<int> LIS(nums.size(), 1);
    for (int i = 0; i < nums.size(); i++) {
      int j;
      for (j = result; j >= 0; j--) {
        if (nums[i] > max_val[j]) {
          LIS[i] = j + 1;
          break;
        }
      }
      if (LIS[i] > result) {
        result = LIS[i];
        max_val[LIS[i]] = nums[i];
      } else if (nums[i] > max_val[j] && nums[i] < max_val[j + 1])
        max_val[j + 1] = nums[i];
    }
    return result;
  }
};