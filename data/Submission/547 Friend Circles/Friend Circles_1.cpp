//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 547 Friend Circles
// https://leetcode.com//problems/friend-circles/description/
// Fetched at 2018-07-24
// Submitted 5 months, 4 weeks ago
// Runtime: 23 ms
// This solution defeats 8.58% cpp solutions

class Solution {
 public:
  int findCircleNum(vector<vector<int>>& M) {
    int n = M.size();
    if (n <= 1) {
      return n;
    }
    vector<bool> visited(n, false);
    int visited_count = 0;
    stack<int> record;
    record.push(0);
    visited_count++;
    visited[0] = true;
    int ret = 1;
    while (visited_count < n) {
      while (!record.empty()) {
        int head = record.top();
        record.pop();
        for (int i = 0; i < n; i++) {
          if (M[head][i] == 1 and visited[i] == false) {
            visited[i] = true;
            record.push(i);
            visited_count++;
          }
        }
      }
      for (int i = 0; i < n; i++) {
        if (visited[i] == false) {
          record.push(i);
          visited[i] = true;
          ret++;
          visited_count++;
          break;
        }
      }
    }
    return ret;
  }
};