//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 529 Minesweeper
// https://leetcode.com//problems/minesweeper/description/
// Fetched at 2018-07-24
// Submitted 3 months ago
// Runtime: 29 ms
// This solution defeats 7.99% cpp solutions

class Solution {
 public:
  vector<vector<int>> direction = {{-1, -1}, {0, -1}, {1, -1}, {-1, 0},
                                   {1, 0},   {-1, 1}, {0, 1},  {1, 1}};
  void DFS(vector<vector<char>>& board, int x, int y) {
    if (x < 0 || y < 0 || x >= board.size() || y >= board[0].size() ||
        board[x][y] != 'E') {
      return;
    }
    board[x][y] = 'B';
    int mine = 0;
    for (auto direct : direction) {
      if (x + direct[0] >= 0 && x + direct[0] < board.size() &&
          y + direct[1] >= 0 && y + direct[1] < board[0].size() &&
          board[x + direct[0]][y + direct[1]] == 'M') {
        mine++;
      }
    }
    if (mine > 0) {
      board[x][y] = char('0' + mine);
    } else {
      for (auto direct : direction) {
        DFS(board, x + direct[0], y + direct[1]);
      }
    }
  }
  vector<vector<char>> updateBoard(vector<vector<char>>& board,
                                   vector<int>& click) {
    if (board[click[0]][click[1]] == 'M') {
      board[click[0]][click[1]] = 'X';
      return board;
    }
    DFS(board, click[0], click[1]);
    return board;
  }
};