// -*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 883 Car Fleet
// https://leetcode.com//problems/car-fleet/description/
// Fetched at 2018-07-24
// Submitted 3 weeks, 3 days ago
// Runtime: 30 ms
// This solution defeats 60.98% java solutions

class Solution {
  private class Car implements Comparable<Car> {
    public int position;
    public int speed;
    public double arriveTime;

    public Car(int position, int speed, int target) {
      this.arriveTime = (double) (target - position) / speed;
      this.position = position;
      this.speed = speed;
    }

    public int compareTo(Car o) {
      return this.position - o.position;
    }
  }

  public int carFleet(int target, int[] position, int[] speed) {
    List<Car> list = new ArrayList<Car>();
    for (int i = 0; i < speed.length; i++) {
      list.add(new Car(position[i], speed[i], target));
    }
    Collections.sort(list);
    Deque<Car> stack = new ArrayDeque<Car>();
    for (Car car : list) {
      while (stack.size() > 0 && car.arriveTime >= stack.peek().arriveTime) stack.poll();
      stack.push(car);
    }
    return stack.size();
  }
}
