//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 286 Walls and Gates
// https://leetcode.com//problems/walls-and-gates/description/
// Fetched at 2018-07-24
// Submitted 4 months ago
// Runtime: 107 ms
// This solution defeats 11.85% cpp solutions

class Solution {
 public:
  void DFS(vector<vector<int>>& rooms, int i, int j) {
    if (i < 0 || j < 0 || i >= rooms.size() || j >= rooms[i].size()) {
      return;
    }
    if (i + 1 < rooms.size() && rooms[i + 1][j] > 1 + rooms[i][j]) {
      rooms[i + 1][j] = rooms[i][j] + 1;
      DFS(rooms, i + 1, j);
    }
    if (j + 1 < rooms[i].size() && rooms[i][j + 1] > 1 + rooms[i][j]) {
      rooms[i][j + 1] = rooms[i][j] + 1;
      DFS(rooms, i, j + 1);
    }
    if (i - 1 >= 0 && rooms[i - 1][j] > 1 + rooms[i][j]) {
      rooms[i - 1][j] = rooms[i][j] + 1;
      DFS(rooms, i - 1, j);
    }
    if (j - 1 >= 0 && rooms[i][j - 1] > 1 + rooms[i][j]) {
      rooms[i][j - 1] = rooms[i][j] + 1;
      DFS(rooms, i, j - 1);
    }
  }
  void wallsAndGates(vector<vector<int>>& rooms) {
    for (int i = 0; i < rooms.size(); i++) {
      for (int j = 0; j < rooms[i].size(); j++) {
        if (rooms[i][j] == 0) {
          DFS(rooms, i, j);
        }
      }
    }
  }
};