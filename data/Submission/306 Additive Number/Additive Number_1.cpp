//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 306 Additive Number
// https://leetcode.com//problems/additive-number/description/
// Fetched at 2018-07-24
// Submitted 2 years, 1 month ago
// Runtime: 0 ms
// This solution defeats 100.0% cpp solutions

class Solution {
 public:
  string addstring(const string &s1, const string &s2) {
    int bits = max(s1.size(), s2.size());
    string result(bits + 1, '0');
    int up = 0;
    int index1 = s1.size() - 1;
    int index2 = s2.size() - 1;
    for (int j = result.size() - 1; j >= 0; j--) {
      if (index1 >= 0 && index2 >= 0) {
        result[j] =
            (char)((int)(up + (s1[index1] - '0') + (s2[index2] - '0')) % 10 +
                   '0');
        up = (int)(s1[index1] - '0' + s2[index2] - '0' + up) / 10;
        index1--;
        index2--;
      } else if (index2 >= 0) {
        result[j] = (char)((int)(up + s2[index2] - '0') % 10 + '0');
        up = (int)(s2[index2] - '0' + up) / 10;
        index2--;
      } else if (index1 >= 0) {
        result[j] = (char)((int)(up + s1[index1] - '0') % 10 + '0');
        up = (int)(s1[index1] - '0' + up) / 10;
        index1--;
      } else if (up != 0) {
        result[j] = (char)(up + '0');
      }
    }
    if (result[0] == '0') {
      result.erase(result.begin());
    }
    return result;
  }
  bool isok(int i, int j, string num) {
    string first = num.substr(0, i);
    string second = num.substr(i, j);
    if ((first.size() > 1 && first[0] == '0') ||
        (second.size() > 1 && second[0] == '0')) {
      return false;
    }
    string sum = addstring(first, second);
    if (sum == num.substr(i + j, num.size() - i - j) &&
        sum.size() + i + j == num.size())
      return true;
    else if (sum == num.substr(i + j, sum.size())) {
      return isok(j, sum.size(), num.substr(i));
    }
    return false;
  }
  bool isAdditiveNumber(string num) {
    if (num.size() < 3) return false;
    for (int i = 1; i <= num.size() / 2; i++)
      for (int j = 1; j <= num.size() / 2; j++) {
        if (num.size() - i - j < max(i, j)) continue;
        if (isok(i, j, num) == true) {
          return true;
        }
      }
    return false;
  }
};