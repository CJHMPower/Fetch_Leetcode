//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 737 Sentence Similarity II
// https://leetcode.com//problems/sentence-similarity-ii/description/
// Fetched at 2018-07-24
// Submitted 2 months, 3 weeks ago
// Runtime: 460 ms
// This solution defeats 4.09% cpp solutions

class Solution {
 public:
  map<string, set<string>> hash;
  bool connected(map<string, set<string>>& hash, string a, string b,
                 set<string>& visited) {
    visited.insert(a);
    if (a == b || hash[a].find(b) != hash[a].end()) {
      return true;
    }
    for (auto it = hash[a].begin(); it != hash[a].end(); it++) {
      if (visited.find(*it) == visited.end() &&
          connected(hash, *it, b, visited)) {
        return true;
      }
    }
    return false;
  }
  bool areSentencesSimilarTwo(vector<string>& words1, vector<string>& words2,
                              vector<pair<string, string>> pairs) {
    if (words1.size() != words2.size()) {
      return false;
    }

    for (auto it = pairs.begin(); it != pairs.end(); it++) {
      if (hash.find(it->first) == hash.end()) hash[it->first] = set<string>();
      if (hash.find(it->second) == hash.end()) hash[it->second] = set<string>();
      hash[it->first].insert(it->second);
      hash[it->second].insert(it->first);
    }
    for (int i = 0; i < words1.size(); i++) {
      set<string> visited;
      if (!connected(hash, words1[i], words2[i], visited)) {
        return false;
      }
    }
    return true;
  }
};