//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 132 Palindrome Partitioning II
// https://leetcode.com//problems/palindrome-partitioning-ii/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 16 ms
// This solution defeats 25.63% cpp solutions

class Solution {
 public:
  bool isPalindrome(const string& s, int start, int end) {
    while (start < end) {
      if (s[start++] != s[end--]) return false;
    }
    return true;
  }

  int minCut(string s) {
    if (s.size() < 2) {
      return 0;
    }
    vector<int> dp(s.size(), INT_MAX);
    int n = s.size();
    vector<int> cut(n + 1, 0);  // number of cuts for the first k characters
    for (int i = 0; i <= n; i++) cut[i] = i - 1;
    for (int i = 0; i < n; i++) {
      for (int j = 0; i - j >= 0 && i + j < n && s[i - j] == s[i + j];
           j++)  // odd length palindrome
        cut[i + j + 1] = min(cut[i + j + 1], 1 + cut[i - j]);

      for (int j = 1; i - j + 1 >= 0 && i + j < n && s[i - j + 1] == s[i + j];
           j++)  // even length palindrome
        cut[i + j + 1] = min(cut[i + j + 1], 1 + cut[i - j + 1]);
    }
    return cut[n];
  }
};