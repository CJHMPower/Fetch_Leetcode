//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 239 Sliding Window Maximum
// https://leetcode.com//problems/sliding-window-maximum/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 1192 ms

class Solution {
 public:
  int maximam(deque<int>& window) {
    int result = INT_MIN;
    for (auto it = window.begin(); it != window.end(); it++) {
      result = max(result, *it);
    }
    return result;
  }
  vector<int> maxSlidingWindow(vector<int>& nums, int k) {
    deque<int> window;
    vector<int> result;
    if (nums.empty() || nums.size() < k) {
      return result;
    }
    int maximal = INT_MIN;
    for (int i = 0; i < k; i++) {
      window.push_back(nums[i]);
      if (nums[i] > maximal) {
        maximal = nums[i];
      }
    }
    result.push_back(maximal);
    for (int i = k; i < nums.size(); i++) {
      window.pop_front();
      window.push_back(nums[i]);
      result.push_back(maximam(window));
    }
    return result;
  }
};