//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 166 Fraction to Recurring Decimal
// https://leetcode.com//problems/fraction-to-recurring-decimal/description/
// Fetched at 2018-07-24
// Submitted 1 year, 9 months ago
// Runtime: 13 ms

class Solution {
 public:
  string fractionToDecimal(int numerator, int denominator) {
    long long int num = numerator;
    long long int deno = denominator;
    int sign = double(num) / deno >= 0 ? 1 : -1;
    num = abs(num);
    deno = abs(deno);
    if (num % deno == 0) {
      if (sign == -1) {
        return "-" + to_string(num / deno);
      } else {
        return to_string(num / deno);
      }
    }
    string result = to_string(num / deno) + ".";
    long long int deci = num % deno;
    int mod = deci * 10 / deno;
    string temp;
    bool flag = false;
    int i = 0;
    vector<int> hash;
    vector<int> m;
    while (deci != 0) {
      i++;
      temp = temp + to_string(mod);
      hash.push_back(deci);
      m.push_back(mod);
      deci = deci * 10 - mod * deno;
      mod = deci * 10 / deno;
      auto it = find(hash.begin(), hash.end(), deci);
      if (it != hash.end()) {
        string recur;
        for (int j = it - hash.begin(); j < i; j++) {
          recur = recur + to_string(m[j]);
        }
        recur = "(" + recur + ")";
        temp.erase(temp.begin() + (it - hash.begin()), temp.end());
        result = result + temp + recur;
        if (sign < 0) {
          result = "-" + result;
        }
        return result;
      }
    }
    int k = temp.size() - 1;
    while (k >= 0 && temp[k] == '0') {
      k--;
    }
    temp.erase(temp.begin() + k + 1, temp.end());
    result = result + temp;
    if (sign < 0) {
      result = "-" + result;
    }
    return result;
  }
};