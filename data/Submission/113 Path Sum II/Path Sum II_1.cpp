//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 113 Path Sum II
// https://leetcode.com//problems/path-sum-ii/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 20 ms
// This solution defeats 2.18% cpp solutions

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
 public:
  vector<vector<int>> Inverse_path(TreeNode* root, int sum) {
    vector<vector<int>> result;
    if (root == nullptr) {
      return result;
    }
    if (root->left == nullptr && root->right == nullptr) {
      if (root->val == sum) {
        return {{sum}};
      } else {
        return result;
      }
    }
    vector<vector<int>> lef = Inverse_path(root->left, sum - root->val);
    vector<vector<int>> rig = Inverse_path(root->right, sum - root->val);
    for (int i = 0; i < lef.size(); i++) {
      lef[i].push_back(root->val);
    }
    for (int i = 0; i < rig.size(); i++) {
      rig[i].push_back(root->val);
    }
    for (int i = 0; i < rig.size(); i++) {
      lef.push_back(rig[i]);
    }
    return lef;
  }
  vector<vector<int>> pathSum(TreeNode* root, int sum) {
    vector<vector<int>> result;
    if (root == nullptr) {
      return result;
    }
    result = Inverse_path(root, sum);
    for (int i = 0; i < result.size(); i++) {
      reverse(result[i].begin(), result[i].end());
    }
    return result;
  }
};