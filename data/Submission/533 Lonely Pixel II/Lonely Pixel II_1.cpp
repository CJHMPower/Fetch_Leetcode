//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 533 Lonely Pixel II
// https://leetcode.com//problems/lonely-pixel-ii/description/
// Fetched at 2018-07-24
// Submitted 3 months ago
// Runtime: 84 ms

class Solution {
 public:
  int findBlackPixel(vector<vector<char>>& picture, int N) {
    if (picture.empty()) {
      return 0;
    }
    int ret = 0;
    map<int, int> rows;
    map<int, int> cols;
    for (int i = 0; i < picture.size(); i++) {
      for (int j = 0; j < picture[i].size(); j++) {
        if (picture[i][j] == 'B') {
          if (rows.find(i) == rows.end()) rows[i] = 0;
          rows[i]++;
          if (cols.find(j) == cols.end()) cols[j] = 0;
          cols[j]++;
        }
      }
    }
    for (int j = 0; j < picture[0].size(); j++) {
      bool flag = true;
      for (int i = 0; i < picture.size(); i++) {
        if (picture[i][j] == 'B' && rows[i] == N && cols[j] == N) {
          for (int r = 0; r < picture.size(); r++) {
            if (r != i && picture[r][j] == 'B' && picture[r] != picture[i]) {
              flag = false;
              break;
            }
          }
          if (flag == true) {
            ret++;
          } else {
            break;
          }
        }
      }
    }
    return ret;
  }
};