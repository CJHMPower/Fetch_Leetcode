//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 643 Maximum Average Subarray I
// https://leetcode.com//problems/maximum-average-subarray-i/description/
// Fetched at 2018-07-24
// Submitted 5 months, 1 week ago
// Runtime: 179 ms
// This solution defeats 8.55% cpp solutions

class Solution {
 public:
  double findMaxAverage(vector<int>& nums, int k) {
    double ret = accumulate(nums.begin(), nums.begin() + k, 0);
    double window = ret;
    for (int i = 0; i + k < nums.size(); i++) {
      window = window - nums[i] + nums[i + k];
      if (window > ret) {
        ret = window;
      }
    }
    return ret / k;
  }
};