//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 78 Subsets
// https://leetcode.com//problems/subsets/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 8 ms
// This solution defeats 2.15% cpp solutions

class Solution {
 public:
  vector<vector<int>> subsets(vector<int>& nums) {
    vector<vector<int>> result;
    result.push_back(vector<int>());
    if (nums.empty()) {
      return result;
    }
    if (nums.size() == 1) {
      result.push_back({{nums[0]}});
    }
    vector<int> temp(nums.size() - 1);
    for (int i = 0; i < temp.size(); i++) {
      temp[i] = nums[i];
    }
    vector<vector<int>> recur = subsets(temp);
    result = recur;
    for (int i = 0; i < recur.size(); i++) {
      recur[i].push_back(nums[nums.size() - 1]);
    }
    for (int i = 0; i < recur.size(); i++) {
      result.push_back(recur[i]);
    }
    return result;
  }
};