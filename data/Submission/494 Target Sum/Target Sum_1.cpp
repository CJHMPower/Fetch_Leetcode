//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 494 Target Sum
// https://leetcode.com//problems/target-sum/description/
// Fetched at 2018-07-24
// Submitted 3 months, 2 weeks ago
// Runtime: 44 ms
// This solution defeats 58.25% cpp solutions

class Solution {
 public:
  int findTargetSumWays(vector<int>& nums, int S) {
    if (nums.empty()) {
      return 0;
    }
    int sum = accumulate(nums.begin(), nums.end(), 0);
    vector<vector<int>> dp(nums.size(), vector<int>(2 * sum + 1, 0));
    dp[0][nums[0] + sum] += 1;
    dp[0][-nums[0] + sum] += 1;
    for (int i = 1; i < nums.size(); i++) {
      for (int j = 0; j < dp[i].size(); j++) {
        if (j - nums[i] >= 0) {
          dp[i][j] += dp[i - 1][j - nums[i]];
        }
        if (j + nums[i] < dp[i - 1].size()) {
          dp[i][j] += dp[i - 1][j + nums[i]];
        }
      }
    }
    if (S >= -sum && S <= sum) {
      return dp[nums.size() - 1][S + sum];
    } else {
      return 0;
    }
  }
};