//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 213 House Robber II
// https://leetcode.com//problems/house-robber-ii/description/
// Fetched at 2018-07-24
// Submitted 2 years, 1 month ago
// Runtime: 24 ms

class Solution {
 public:
  int rob(vector<int>& nums) {
    if (nums.empty()) {
      return 0;
    }
    if (nums.size() == 1) {
      return nums[0];
    }
    if (nums.size() == 2) {
      return max(nums[0], nums[1]);
    }
    vector<vector<int>> dp(nums.size());
    for (int i = 0; i < dp.size(); i++) dp[i].resize(dp.size(), 0);
    for (int i = 0; i < dp.size() - 1; i++) {
      dp[i][i] = nums[i];
      dp[i][i + 1] = max(nums[i], nums[i + 1]);
    }
    dp[dp.size() - 1][dp.size() - 1] = nums[nums.size() - 1];
    for (int i = 2; i < dp.size(); i++) {
      for (int j = 0; j + i < dp.size(); j++) {
        int max = 0;
        for (int k = j; k <= j + i; k++) {
          if (k + 2 < dp.size() && dp[j][k] + dp[k + 2][j + i] > max) {
            max = dp[j][k] + dp[k + 2][j + i];
          }
        }
        dp[j][j + i] = max;
      }
    }
    return max(dp[0][dp.size() - 2], dp[1][dp.size() - 1]);
  }
};