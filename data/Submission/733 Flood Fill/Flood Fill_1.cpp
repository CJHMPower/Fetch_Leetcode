//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 733 Flood Fill
// https://leetcode.com//problems/flood-fill/description/
// Fetched at 2018-07-24
// Submitted 4 months ago
// Runtime: 32 ms
// This solution defeats 2.6% cpp solutions

class Solution {
 public:
  void DFS(vector<vector<int>>& image, int x, int y, int color, int newColor) {
    if (x < 0 || y < 0 || x >= image.size() || y >= image[0].size() ||
        color != image[x][y]) {
      return;
    }
    image[x][y] = newColor;
    DFS(image, x - 1, y, color, newColor);
    DFS(image, x, y - 1, color, newColor);
    DFS(image, x + 1, y, color, newColor);
    DFS(image, x, y + 1, color, newColor);
  }
  vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc,
                                int newColor) {
    if (image[sr][sc] == newColor) {
      return image;
    }
    DFS(image, sr, sc, image[sr][sc], newColor);
    return image;
  }
};