//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 651 4 Keys Keyboard
// https://leetcode.com//problems/4-keys-keyboard/description/
// Fetched at 2018-07-24
// Submitted 5 months, 1 week ago
// Runtime: 3 ms
// This solution defeats 9.69% cpp solutions

class Solution {
 public:
  int maxA(int N) {
    vector<int> dp;
    vector<int> ctrl;
    dp.push_back(0);
    ctrl.push_back(0);
    if (N <= 6) {
      return N;
    }
    for (int i = 1; i <= 5; i++) {
      dp.push_back(i);
      ctrl.push_back(0);
    }

    for (int i = 6; i <= N; i++) {
      int cmp = 0;
      int ctrl_cmp = 0;
      if (dp[i - 1] + ctrl[i - 1] > cmp ||
          (dp[i - 1] + ctrl[i - 1] == cmp && ctrl[i - 1] > ctrl_cmp)) {
        cmp = dp[i - 1] + ctrl[i - 1];
        ctrl_cmp = ctrl[i - 1];
      }
      if (dp[i - 2] + 2 * ctrl[i - 2] > cmp ||
          (dp[i - 2] + 2 * ctrl[i - 2] == cmp && ctrl[i - 2] > ctrl_cmp)) {
        cmp = dp[i - 2] + 2 * ctrl[i - 2];
        ctrl_cmp = ctrl[i - 2];
      }
      int value = dp[i - 3] * 2;
      if (value > cmp || (value == cmp && dp[i - 3] > ctrl_cmp)) {
        cmp = value;
        ctrl_cmp = dp[i - 3];
      }
      value = dp[i - 4] * 3;
      if (value > cmp || (value == cmp && dp[i - 4] > ctrl_cmp)) {
        cmp = value;
        ctrl_cmp = dp[i - 4];
      }
      dp.push_back(cmp);
      ctrl.push_back(ctrl_cmp);
    }
    return dp[N];
  }
};