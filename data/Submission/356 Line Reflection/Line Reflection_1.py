#-*- coding:utf-8 -*-
#Generated by the Fetch-Leetcode project on the Github
#https://github.com/CJHMPower/Fetch-Leetcode/

#356 Line Reflection
#https://leetcode.com//problems/line-reflection/description/
#Fetched at 2018-07-24
#Submitted 5 months ago
#Runtime: 64 ms
#This solution defeats 40.43% python3 solutions


class Solution:
    def isReflected(self, points):
        """
        :type points: List[List[int]]
        :rtype: bool
        """
        y = 0.0
        hash_points = set()
        points = list(map(lambda x: tuple(x), points))
        sorted_points = sorted(list(set(points)), key=lambda x: x[0])
        if (len(sorted_points) < 2):
            return True

        for point in sorted_points:
            y += point[0]

        y /= len(sorted_points)
        for point in sorted_points:
            if (point[0] != y):
                hash_points.add(point)
        half = int(len(sorted_points) / 2)
        for point in sorted_points[:half]:
            if (point[0] == y):
                continue
            mirror = 2 * y - point[0], point[1]
            if mirror in hash_points:
                hash_points.remove(point)
                hash_points.remove(mirror)
                if (len(hash_points) == 0):
                    return True
            else:
                return False

        return hash_points == set()
