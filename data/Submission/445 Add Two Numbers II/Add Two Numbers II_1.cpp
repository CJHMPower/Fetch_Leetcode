//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 445 Add Two Numbers II
// https://leetcode.com//problems/add-two-numbers-ii/description/
// Fetched at 2018-07-24
// Submitted 5 months, 1 week ago
// Runtime: 60 ms

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
 public:
  ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
    string s1;
    string s2;
    ListNode *p1 = l1;
    ListNode *p2 = l2;
    while (p1) {
      s1 = s1 + to_string(p1->val);
      p1 = p1->next;
    }
    while (p2) {
      s2 = s2 + to_string(p2->val);
      p2 = p2->next;
    }
    int m = s1.size() - 1;
    int n = s2.size() - 1;
    int plus = 0;
    int bit = 0;
    ListNode *head = NULL;
    ListNode *tail = NULL;
    int digit;
    if (n > m) {
      swap(s1, s2);
      swap(m, n);
    }

    while (m >= 0) {
      if (n >= 0) {
        digit = plus + (s1[m] - '0') + (s2[n] - '0');
      } else {
        digit = plus + (s1[m] - '0');
      }
      bit = digit % 10;
      plus = digit / 10;
      ListNode *p = (ListNode *)malloc(sizeof(ListNode));
      p->val = bit;
      p->next = NULL;
      if (head == NULL) {
        head = p;
      } else {
        p->next = head;
        head = p;
      }
      m--;
      n--;
    }
    if (plus != 0) {
      ListNode *p = (ListNode *)malloc(sizeof(ListNode));
      p->val = plus;
      p->next = NULL;
      p->next = head;
      head = p;
    }
    return head;
  }
};