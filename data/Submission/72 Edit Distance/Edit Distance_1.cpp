//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 72 Edit Distance
// https://leetcode.com//problems/edit-distance/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 22 ms
// This solution defeats 5.13% cpp solutions

class Solution {
 public:
  int minDistance(string word1, string word2) {
    if (word1.empty()) {
      return word2.size();
    }
    if (word2.empty()) {
      return word1.size();
    }
    vector<vector<int>> dp(word1.size(), vector<int>(word2.size(), 0));
    if (word1[0] == word2[0]) {
      dp[0][0] = 0;
    } else {
      dp[0][0] = 1;
    }
    for (int i = 1; i < dp.size(); i++) {
      if (word1[i] == word2[0]) {
        dp[i][0] = max(dp[i - 1][0], i);
      } else {
        dp[i][0] = max(dp[i - 1][0] + 1, i);
      }
    }
    for (int i = 1; i < dp[0].size(); i++) {
      if (word1[0] == word2[i]) {
        dp[0][i] = max(dp[0][i - 1], i);
      } else {
        dp[0][i] = max(dp[0][i - 1] + 1, i);
      }
    }
    for (int i = 1; i < dp.size(); i++) {
      for (int j = 1; j < dp[i].size(); j++) {
        if (word1[i] == word2[j]) {
          dp[i][j] = min(dp[i - 1][j - 1], min(dp[i - 1][j], dp[i][j - 1]) + 1);
        } else {
          dp[i][j] =
              min(dp[i - 1][j - 1] + 1, min(dp[i - 1][j], dp[i][j - 1]) + 1);
        }
      }
    }
    return dp[word1.size() - 1][word2.size() - 1];
  }
};