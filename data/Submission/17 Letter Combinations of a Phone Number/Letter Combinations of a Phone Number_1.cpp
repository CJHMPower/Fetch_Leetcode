//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 17 Letter Combinations of a Phone Number
// https://leetcode.com//problems/letter-combinations-of-a-phone-number/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 0 ms
// This solution defeats 100.0% cpp solutions

class Solution {
 public:
  void letter_recur(string &s, vector<string> &result,
                    map<char, vector<char>> &tele) {
    if (s.empty()) {
      return;
    }
    if (result.empty()) {
      char c = s[s.size() - 1];
      vector<char> tc = tele[c];
      for (int i = 0; i < tc.size(); i++) {
        string t(1, tc[i]);
        result.push_back(t);
      }
    } else {
      char c = s[s.size() - 1];
      int len = tele[c].size();
      if (len == 0) {
        goto access;
      }
      for (int i = 0; i < result.size(); i++) {
        result[i].insert(result[i].begin(), tele[c][0]);
      }
      int size_now = result.size();
      for (int i = 0; i < size_now; i++) {
        string strt = result[i];
        for (int j = 1; j < tele[c].size(); j++) {
          strt[0] = tele[c][j];
          result.push_back(strt);
        }
      }
    }
  access:
    s.pop_back();
    letter_recur(s, result, tele);
  }
  vector<string> letterCombinations(string digits) {
    map<char, vector<char>> tele;
    tele.insert({'0', vector<char>()});
    tele.insert({'1', vector<char>()});
    tele.insert({'2', {'a', 'b', 'c'}});
    tele.insert({'3', {'d', 'e', 'f'}});
    tele.insert({'4', {'g', 'h', 'i'}});
    tele.insert({'5', {'j', 'k', 'l'}});
    tele.insert({'6', {'m', 'n', 'o'}});
    tele.insert({'7', {'p', 'q', 'r', 's'}});
    tele.insert({'8', {'t', 'u', 'v'}});
    tele.insert({'9', {'w', 'x', 'y', 'z'}});
    vector<string> result;
    letter_recur(digits, result, tele);
    return result;
  }
};