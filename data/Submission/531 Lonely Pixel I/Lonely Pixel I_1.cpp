//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 531 Lonely Pixel I
// https://leetcode.com//problems/lonely-pixel-i/description/
// Fetched at 2018-07-24
// Submitted 3 months ago
// Runtime: 59 ms
// This solution defeats 5.0% cpp solutions

class Solution {
 public:
  int findLonelyPixel(vector<vector<char>>& picture) {
    if (picture.empty()) {
      return 0;
    }
    int ret = 0;
    vector<vector<bool>> visited(picture.size(),
                                 vector<bool>(picture[0].size(), false));
    for (int i = 0; i < picture.size(); i++) {
      for (int j = 0; j < picture[i].size(); j++) {
        if (picture[i][j] == 'B' && visited[i][j] == false) {
          bool flag = false;
          for (int m = 0; m < picture[i].size(); m++) {
            if (picture[i][m] == 'B' && m != j) {
              visited[i][m] = true;

              flag = true;
              break;
            }
          }
          if (flag == false) {
            for (int m = 0; m < picture.size(); m++) {
              if (picture[m][j] == 'B' && m != i) {
                visited[m][j] = true;
                flag = true;

                break;
              }
            }
          }
          if (flag == false) {
            ret++;
          }
        }
      }
    }
    return ret;
  }
};