//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 130 Surrounded Regions
// https://leetcode.com//problems/surrounded-regions/description/
// Fetched at 2018-07-24
// Submitted 2 months, 4 weeks ago
// Runtime: 22 ms
// This solution defeats 7.31% cpp solutions

class Solution {
 public:
  void DFS(vector<vector<char>>& board, int i, int j) {
    if (i < 0 || i >= board.size() || j < 0 || j >= board[0].size() ||
        board[i][j] != 'O') {
      return;
    }
    board[i][j] = 'T';
    DFS(board, i - 1, j);
    DFS(board, i + 1, j);
    DFS(board, i, j - 1);
    DFS(board, i, j + 1);
  }
  void solve(vector<vector<char>>& board) {
    if (board.empty()) {
      return;
    }
    int m = board.size(), n = board[0].size();
    for (int i = 0; i < m; i++) {
      if (board[i][0] == 'O') {
        DFS(board, i, 0);
      }
      if (board[i][n - 1] == 'O') {
        DFS(board, i, n - 1);
      }
    }
    for (int j = 0; j < n; j++) {
      if (board[0][j] == 'O') {
        DFS(board, 0, j);
      }
      if (board[m - 1][j] == 'O') {
        DFS(board, m - 1, j);
      }
    }
    for (int i = 0; i < m; i++) {
      for (int j = 0; j < n; j++) {
        if (board[i][j] == 'T') {
          board[i][j] = 'O';
        } else if (board[i][j] == 'O') {
          board[i][j] = 'X';
        }
      }
    }
  }
};