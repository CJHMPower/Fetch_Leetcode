//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 279 Perfect Squares
// https://leetcode.com//problems/perfect-squares/description/
// Fetched at 2018-07-24
// Submitted 2 years, 1 month ago
// Runtime: 464 ms
// This solution defeats 7.58% cpp solutions

class Solution {
 public:
  int numSquares(int n) {
    if ((int)sqrtf(n) == sqrtf(n)) return 1;
    vector<int> nums(n + 1, pow(10, 7));
    nums[0] = 1;
    for (int i = 1; i <= n; i++) {
      if ((int)sqrtf(i) == sqrtf(i))
        nums[i] = 1;
      else {
        for (int j = 1; j <= (int)(sqrtf(i)); j++) {
          nums[i] = min(nums[i], nums[i - j * j] + 1);
        }
      }
    }
    return nums[n];
  }
};