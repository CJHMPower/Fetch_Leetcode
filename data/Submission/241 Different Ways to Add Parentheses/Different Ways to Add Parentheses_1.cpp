//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 241 Different Ways to Add Parentheses
// https://leetcode.com//problems/different-ways-to-add-parentheses/description/
// Fetched at 2018-07-24
// Submitted 2 years, 1 month ago
// Runtime: 8 ms
// This solution defeats 1.83% cpp solutions

class Solution {
 public:
  int compute(int a, int b, char c) {
    switch (c) {
      case '+':
        return a + b;
      case '-':
        return a - b;
      case '*':
        return a * b;
    }
    return 0;
  }
  vector<int> divide_and_conquer(string input, int left, int right) {
    int left_size = 0, right_size = 0;
    vector<int> result;
    for (int i = left; i <= right; i++) {
      if (input[i] == '-' || input[i] == '+' || input[i] == '*') {
        vector<int> lef = divide_and_conquer(input, left, i - 1);
        vector<int> rig = divide_and_conquer(input, i + 1, right);
        left_size = lef.size();
        right_size = rig.size();
        for (int j = 0; j < left_size; j++)
          for (int k = 0; k < right_size; k++) {
            result.push_back(compute(lef[j], rig[k], input[i]));
          }
      }
    }
    if (result.size() == 0) {
      std::stringstream ss;
      ss << input.substr(left, right - left + 1);
      int sub;
      ss >> sub;
      result.push_back(sub);
    }
    return result;
  }
  vector<int> diffWaysToCompute(string input) {
    vector<int> result;
    if (input.empty()) {
      return result;
    }
    if (input.size() == 0) {
      result.push_back(input[0] - '0');
      return result;
    }
    result = divide_and_conquer(input, 0, input.size() - 1);
    return result;
  }
};