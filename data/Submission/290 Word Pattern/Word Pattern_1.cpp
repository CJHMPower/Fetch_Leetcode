//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 290 Word Pattern
// https://leetcode.com//problems/word-pattern/description/
// Fetched at 2018-07-24
// Submitted 2 years, 1 month ago
// Runtime: 0 ms
// This solution defeats 100.0% cpp solutions

class Solution {
 public:
  bool wordPattern(string pattern, string str) {
    if ((pattern.empty() ^ str.empty()) != 0) return false;
    map<char, string> refer;
    int start = 0;
    int j;
    for (int i = 0; i < pattern.size(); i++) {
      j = start;
      while (j < str.size() && str[j] != ' ') {
        j++;
      }
      string value;
      if (start < str.size())
        value = str.substr(start, j - start);
      else
        return false;
      start = j + 1;
      bool existed = false;
      for (auto it = refer.begin(); it != refer.end(); it++) {
        if ((it->first == pattern[i] && it->second != value) ||
            (it->second == value && it->first != pattern[i])) {
          return false;
        }
        if (it->first == pattern[i] || it->second == value) {
          existed = true;
        }
      }
      if (existed == false) {
        refer.insert({pattern[i], value});
      }
    }
    if (j < str.size()) return false;
    return true;
  }
};