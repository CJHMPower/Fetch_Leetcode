//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 800 Letter Case Permutation
// https://leetcode.com//problems/letter-case-permutation/description/
// Fetched at 2018-07-24
// Submitted 3 months ago
// Runtime: 13 ms
// This solution defeats 5.36% cpp solutions

class Solution {
 public:
  void backtrace(int start, vector<vector<int>>& ret) {
    int n = ret.size();
    for (int i = 0; i < n; i++) {
      vector<int> temp = ret[i];
      temp.push_back(start);
      ret.push_back(temp);
    }
  }
  string flip(string S, vector<int>& nums) {
    for (auto a : nums) {
      if (S[a] >= 'A' && S[a] <= 'Z') {
        S[a] = tolower(S[a]);
      } else {
        S[a] = toupper(S[a]);
      }
    }
    return S;
  }
  vector<string> letterCasePermutation(string S) {
    vector<vector<int>> ret;
    ret.push_back(vector<int>());
    for (int i = 0; i < S.size(); i++) {
      if (!(S[i] >= '0' && S[i] <= '9')) {
        backtrace(i, ret);
      }
    }
    vector<string> result;
    for (auto v : ret) {
      result.push_back(flip(S, v));
    }
    return result;
  }
};