// -*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 221 Maximal Square
// https://leetcode.com//problems/maximal-square/description/
// Fetched at 2018-07-24
// Submitted 1 month, 1 week ago
// Runtime: 8 ms
// This solution defeats 91.47% java solutions

class Solution {
  public int maximalSquare(char[][] matrix) {
    if (matrix.length == 0) return 0;
    int m = matrix.length, n = matrix[0].length;
    int[][] dp = new int[m][n];
    int ret = 0, k = 0;
    for (int i = 0; i < m; i++) {
      if (matrix[i][0] == '1') {
        dp[i][0] = 1;
        ret = 1;
      }
    }
    for (int j = 0; j < n; j++) {
      if (matrix[0][j] == '1') {
        dp[0][j] = 1;
        ret = 1;
      }
    }
    for (int i = 1; i < m; i++) {
      for (int j = 1; j < n; j++) {
        if (matrix[i][j] == '1') {
          k = 1;
          dp[i][j] = 1;
          while (k <= dp[i - 1][j - 1]
              && i - k >= 0
              && matrix[i - k][j] == '1'
              && j - k >= 0
              && matrix[i][j - k] == '1') {
            k++;
            dp[i][j]++;
          }
          ret = Math.max(ret, dp[i][j]);
        }
      }
    }
    return ret * ret;
  }
}
