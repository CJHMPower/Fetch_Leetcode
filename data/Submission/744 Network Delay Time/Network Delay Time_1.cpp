//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 744 Network Delay Time
// https://leetcode.com//problems/network-delay-time/description/
// Fetched at 2018-07-24
// Submitted 2 months, 2 weeks ago
// Runtime: 72 ms
// This solution defeats 24.96% cpp solutions

class Solution {
 public:
  int networkDelayTime(vector<vector<int>>& times, int N, int k) {
    vector<int> d(N, INT_MAX / 2);
    vector<vector<pair<int, int>>> edges(N, vector<pair<int, int>>());

    d[k - 1] = 0;
    for (auto a : times) {
      if (a[0] == k) {
        d[a[1] - 1] = a[2];
      }
      edges[a[0] - 1].push_back(make_pair(a[1] - 1, a[2]));
    }
    auto cmp = [&d](int a, int b) -> bool { return d[a - 1] > d[b - 1]; };

    priority_queue<int, vector<int>, decltype(cmp)> Q(cmp);
    for (int i = 1; i <= N; i++) {
      if (i == k) continue;
      Q.push(i);
    }

    int ret = 0;
    while (!Q.empty()) {
      int u = Q.top();
      Q.pop();

      for (auto v : edges[u - 1]) {
        if (d[v.first] > d[u - 1] + v.second) {
          d[v.first] = d[u - 1] + v.second;
          Q.push(v.first + 1);
        }
      }
    }
    for (auto v : d) {
      if (v == INT_MAX / 2) {
        return -1;
      }
      ret = max(v, ret);
    }
    return ret;
  }
};