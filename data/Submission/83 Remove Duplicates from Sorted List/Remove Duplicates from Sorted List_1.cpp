//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 83 Remove Duplicates from Sorted List
// https://leetcode.com//problems/remove-duplicates-from-sorted-list/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 12 ms
// This solution defeats 3.04% cpp solutions

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
 public:
  ListNode* deleteDuplicates(ListNode* head) {
    if (head == nullptr || head->next == nullptr) {
      return head;
    }
    ListNode* p = head;
    ListNode* q = p->next;
    bool tags = false;
    while (q != nullptr && q->val == p->val) {
      tags = true;
      p = p->next;
      q = q->next;
    }
    head = p;
    if (tags == true) {
      return deleteDuplicates(head);
    }
    while (q != nullptr && p != nullptr) {
      tags = false;
      q = p->next;
      while (q != nullptr && p != nullptr && q->val == p->val) {
        tags = true;
        q = q->next;
      }
      if (tags == true) {
        p->next = q;
        p = q;
      } else {
        p = p->next;
      }
    }
    return head;
  }
};