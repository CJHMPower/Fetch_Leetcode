//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 207 Course Schedule
// https://leetcode.com//problems/course-schedule/description/
// Fetched at 2018-07-24
// Submitted 2 years, 1 month ago
// Runtime: 24 ms
// This solution defeats 19.02% cpp solutions

class Solution {
 public:
  bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
    if (numCourses < 2) {
      return true;
    }
    vector<vector<int>> graph(numCourses);
    vector<int> indegree(numCourses, 0);
    for (auto it = prerequisites.begin(); it != prerequisites.end(); it++) {
      graph[it->second].push_back(it->first);
      indegree[it->first]++;
    }
    queue<int> Q;
    for (int i = 0; i < numCourses; i++) {
      if (indegree[i] == 0) {
        Q.push(i);
      }
    }
    int counter = 0;
    while (!Q.empty()) {
      int u = Q.front();
      Q.pop();
      counter++;
      for (int i = 0; i < graph[u].size(); i++)
        if (--indegree[graph[u][i]] == 0) {
          Q.push(graph[u][i]);
        }
    }
    return counter == numCourses;
  }
};