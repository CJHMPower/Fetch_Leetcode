//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 503 Next Greater Element II
// https://leetcode.com//problems/next-greater-element-ii/description/
// Fetched at 2018-07-24
// Submitted 3 months, 3 weeks ago
// Runtime: 130 ms
// This solution defeats 18.49% cpp solutions

class Solution {
 public:
  vector<int> nextGreaterElements(vector<int>& nums) {
    if (nums.empty()) {
      return vector<int>();
    }
    vector<int> ret = vector<int>(nums.size(), 0);
    int idx = 0;
    int max_val = -INT_MAX;
    for (int i = 0; i < nums.size(); i++) {
      if (nums[i] > max_val) {
        max_val = nums[i];
        idx = i;
      }
    }
    stack<int> st;
    st.push(max_val);
    ret[idx] = -1;
    for (int i = (idx - 1 + nums.size()) % nums.size(), n = 1; n < nums.size();
         n++, i = (i - 1 + nums.size()) % nums.size()) {
      while (!st.empty() && st.top() <= nums[i]) {
        st.pop();
      }
      if (st.empty()) {
        ret[i] = -1;
      } else {
        ret[i] = st.top();
      }
      st.push(nums[i]);
    }
    return ret;
  }
};