//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 516 Longest Palindromic Subsequence
// https://leetcode.com//problems/longest-palindromic-subsequence/description/
// Fetched at 2018-07-24
// Submitted 3 months, 1 week ago
// Runtime: 81 ms
// This solution defeats 5.26% cpp solutions

class Solution {
 public:
  int longestPalindromeSubseq(string s) {
    if (s.empty()) {
      return 0;
    }
    int n = s.size();
    vector<vector<int>> dp(n, vector<int>(n, 1));

    for (int k = 1; k < n; k++) {
      for (int i = 0; i + k < n; i++) {
        if (s[i] == s[i + k]) {
          if (i + 1 <= i + k - 1) {
            dp[i][i + k] = dp[i + 1][i + k - 1] + 2;
          } else {
            dp[i][i + k] = 2;
          }
        } else {
          dp[i][i + k] = max(dp[i + 1][i + k], dp[i][i + k - 1]);
        }
      }
    }
    return dp[0][n - 1];
  }
};