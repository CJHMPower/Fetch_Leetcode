//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 298 Binary Tree Longest Consecutive Sequence
// https://leetcode.com//problems/binary-tree-longest-consecutive-sequence/description/
// Fetched at 2018-07-24
// Submitted 2 months, 1 week ago
// Runtime: 166 ms
// This solution defeats 4.53% cpp solutions

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
 public:
  int longestConsecutive(TreeNode* root) {
    if (root == NULL) {
      return 0;
    }
    TreeNode* p = root;
    int ret = 1;
    while (p) {
      if (p->left != NULL && p->left->val == p->val + 1) {
        p = p->left;
        ret++;
      } else if (p->right != NULL && p->right->val == p->val + 1) {
        p = p->right;
        ret++;
      } else {
        break;
      }
    }
    int left = longestConsecutive(root->left);
    int right = longestConsecutive(root->right);
    return max(ret, max(left, right));
  }
};