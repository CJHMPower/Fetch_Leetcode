//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 142 Linked List Cycle II
// https://leetcode.com//problems/linked-list-cycle-ii/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 12 ms
// This solution defeats 7.99% cpp solutions

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
 public:
  ListNode* detectCycle(ListNode* head) {
    if (head == nullptr) {
      return nullptr;
    }
    ListNode* p1 = head;
    ListNode* p2 = head;
    while (p1 != nullptr && p2 != nullptr) {
      p1 = p1->next;
      p2 = p2->next;
      if (p2 != nullptr) {
        p2 = p2->next;
      }
      if (p1 == p2) {
        break;
      }
    }
    if (p1 == nullptr || p2 == nullptr) {
      return nullptr;
    }
    p1 = head;
    while (p1 != p2) {
      p1 = p1->next;
      p2 = p2->next;
    }
    return p2;
  }
};