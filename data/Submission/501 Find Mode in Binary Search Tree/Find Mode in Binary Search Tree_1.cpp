//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 501 Find Mode in Binary Search Tree
// https://leetcode.com//problems/find-mode-in-binary-search-tree/description/
// Fetched at 2018-07-24
// Submitted 5 months, 4 weeks ago
// Runtime: 21 ms
// This solution defeats 4.24% cpp solutions

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
 public:
  int count(TreeNode* root, int val) {
    if (root == NULL) {
      return 0;
    }
    if (root->val < val) {
      return count(root->right, val);
    } else if (root->val > val) {
      return count(root->left, val);
    } else if (root->val == val) {
      return 1 + count(root->left, val) + count(root->right, val);
    }
    return 0;
  }
  vector<int> findMode2(TreeNode* root) {
    vector<int> ret;
    if (root == NULL) {
      return ret;
    }
    vector<int> left = findMode2(root->left);
    vector<int> right = findMode2(root->right);
    int count_left = count(root->left, root->val);
    int count_right = count(root->right, root->val);
    int max_count = 0;
    if (left.empty()) {
      if (!right.empty()) {
        ret = right;
        max_count = right[0];
      }
    } else if (right.empty()) {
      ret = left;
      max_count = left[0];
    } else if (left[0] > right[0]) {
      ret = left;
      max_count = left[0];
    } else if (right[0] > left[0]) {
      ret = right;
      max_count = right[0];
    } else {
      max_count = left[0];
      ret = left;
      for (int i = 1; i < right.size(); i++) {
        ret.push_back(right[i]);
      }
    }
    int value = count_left + count_right + 1;
    if (value > max_count) {
      ret.clear();
      ret.push_back(value);
      ret.push_back(root->val);
    } else if (value == max_count) {
      ret.push_back(root->val);
    }
    return ret;
  }
  vector<int> findMode(TreeNode* root) {
    if (root == NULL) {
      return vector<int>();
    }
    vector<int> values = findMode2(root);
    vector<int> ret;
    ret.insert(ret.begin(), values.begin() + 1, values.end());
    return ret;
  }
};