// -*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 663 Equal Tree Partition
// https://leetcode.com//problems/equal-tree-partition/description/
// Fetched at 2018-07-24
// Submitted 1 month ago
// Runtime: 14 ms
// This solution defeats 51.26% java solutions

/**
 * Definition for a binary tree node. public class TreeNode { int val; TreeNode left; TreeNode
 * right; TreeNode(int x) { val = x; } }
 */
class Solution {
  void bottomSum(TreeNode root, HashMap<Integer, TreeNode> map) {
    if (root == null) return;
    bottomSum(root.left, map);
    bottomSum(root.right, map);
    if (root.left != null) root.val += root.left.val;
    if (root.right != null) root.val += root.right.val;
    if (!map.containsKey(root.val)) map.put(root.val, root);
  }

  public boolean checkEqualTree(TreeNode root) {
    HashMap<Integer, TreeNode> map = new HashMap<>();
    bottomSum(root, map);
    if (root.val % 2 != 0) return false;
    return map.containsKey(root.val / 2) && map.get(root.val / 2) != root;
  }
}
