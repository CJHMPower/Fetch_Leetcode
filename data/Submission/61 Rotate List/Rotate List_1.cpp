//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 61 Rotate List
// https://leetcode.com//problems/rotate-list/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 12 ms
// This solution defeats 3.49% cpp solutions

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
 public:
  ListNode* rotateRight(ListNode* head, int k) {
    if (head == nullptr || head->next == nullptr || k == 0) {
      return head;
    }
    int i = 0, size = 0;
    ListNode* p = head;
    ListNode* q = head;
    while (p != nullptr) {
      p = p->next;
      size++;
    }
    p = head;
    k = k % size;
    while (q != nullptr && i < k) {
      q = q->next;
      i++;
    }
    while (q->next != nullptr) {
      q = q->next;
      p = p->next;
    }
    q->next = head;
    head = p->next;
    p->next = nullptr;
    return head;
  }
};