// -*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 245 Shortest Word Distance III
// https://leetcode.com//problems/shortest-word-distance-iii/description/
// Fetched at 2018-07-24
// Submitted 1 month, 3 weeks ago
// Runtime: 7 ms
// This solution defeats 12.27% java solutions

class Solution {
  public static int binary_search(ArrayList<Integer> arr, Integer target) {
    int low = 0, high = arr.size() - 1, mid;
    while (low <= high) {
      mid = (low + high) / 2;
      if (arr.get(mid).equals(target)) {
        return 0;
      } else if (arr.get(mid) < target) {
        low = mid + 1;
      } else {
        high = mid - 1;
      }
    }
    low = Math.min(low, arr.size() - 1);
    high = Math.max(0, high);
    return Math.min(Math.abs(target - arr.get(low)), Math.abs(target - arr.get(high)));
  }

  public int shortestWordDistance(String[] words, String word1, String word2) {
    HashMap<String, ArrayList<Integer>> map = new HashMap<String, ArrayList<Integer>>();
    int i = 0;
    for (String word : words) {
      if (!map.containsKey(word)) {
        map.put(word, new ArrayList<Integer>());
      }
      map.get(word).add(i);
      i++;
    }
    int ret = Integer.MAX_VALUE;
    if (word1.equals(word2)) {
      ArrayList<Integer> arr = map.get(word1);
      for (int j = 0; j < arr.size() - 1; j++) {
        ret = Math.min(ret, arr.get(j + 1) - arr.get(j));
      }
      return ret;
    }
    for (Integer a : map.get(word2)) {
      ret = Math.min(ret, binary_search(map.get(word1), a));
    }
    return ret;
  }
}
