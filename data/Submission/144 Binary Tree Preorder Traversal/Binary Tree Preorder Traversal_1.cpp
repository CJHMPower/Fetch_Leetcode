//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 144 Binary Tree Preorder Traversal
// https://leetcode.com//problems/binary-tree-preorder-traversal/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 0 ms
// This solution defeats 100.0% cpp solutions

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
 public:
  vector<int> preorderTraversal(TreeNode* root) {
    stack<TreeNode*> pre;
    vector<int> result;
    if (root == nullptr) {
      return result;
    }
    pre.push(root);
    result.push_back(root->val);
    while (!pre.empty()) {
      if (pre.top()->left != nullptr) {
        TreeNode* temp = pre.top();
        result.push_back(pre.top()->left->val);
        pre.push(pre.top()->left);
        temp->left = nullptr;
      } else if (pre.top()->right != nullptr) {
        TreeNode* temp = pre.top();
        result.push_back(pre.top()->right->val);
        pre.push(pre.top()->right);
        temp->right = nullptr;
      } else if (pre.top()->left == nullptr && pre.top()->right == nullptr) {
        pre.pop();
      }
    }
    return result;
  }
};