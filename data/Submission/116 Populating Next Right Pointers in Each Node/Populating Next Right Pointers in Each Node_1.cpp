//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 116 Populating Next Right Pointers in Each Node
// https://leetcode.com//problems/populating-next-right-pointers-in-each-node/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 29 ms
// This solution defeats 2.49% cpp solutions

/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
 public:
  void connect(TreeLinkNode *root) {
    if (root == nullptr) {
      return;
    }
    deque<TreeLinkNode *> layer;
    layer.push_back(root);
    while (!layer.empty()) {
      if (((layer.size()) & (layer.size() - 1)) == 0) {
        for (int i = 0; i < layer.size() - 1; i++) {
          layer[i]->next = layer[i + 1];
        }
        layer.back()->next = nullptr;
      }
      if (layer.front()->left != nullptr) {
        layer.push_back(layer.front()->left);
      }
      if (layer.front()->right != nullptr) {
        layer.push_back(layer.front()->right);
      }
      layer.pop_front();
    }
  }
};