//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 120 Triangle
// https://leetcode.com//problems/triangle/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 8 ms
// This solution defeats 3.88% cpp solutions

class Solution {
 public:
  int minimumTotal(vector<vector<int>>& triangle) {
    if (triangle.empty()) {
      return 0;
    }
    if (triangle.size() == 1) {
      return triangle[0][0];
    }
    vector<vector<int>> dp(triangle.size());
    dp[0].push_back(triangle[0][0]);
    for (int i = 1; i < triangle.size(); i++) {
      dp[i].push_back(triangle[i][0] + dp[i - 1][0]);
      int j = 1;
      while (j < triangle[i].size() - 1) {
        dp[i].push_back(triangle[i][j] + min(dp[i - 1][j - 1], dp[i - 1][j]));
        j++;
      }
      dp[i].push_back(triangle[i][triangle[i].size() - 1] +
                      dp[i - 1][dp[i - 1].size() - 1]);
    }
    int min = dp[dp.size() - 1][0];
    for (int i = 1; i < dp[dp.size() - 1].size(); i++) {
      if (dp[dp.size() - 1][i] < min) {
        min = dp[dp.size() - 1][i];
      }
    }
    return min;
  }
};