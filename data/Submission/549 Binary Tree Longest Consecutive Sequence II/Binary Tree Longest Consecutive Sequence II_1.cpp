//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 549 Binary Tree Longest Consecutive Sequence II
// https://leetcode.com//problems/binary-tree-longest-consecutive-sequence-ii/description/
// Fetched at 2018-07-24
// Submitted 2 months, 1 week ago
// Runtime: 13 ms
// This solution defeats 2.42% cpp solutions

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
 public:
  int head_consecutive(TreeNode *root, int val) {
    if (root == NULL) {
      return 0;
    }
    int left = 1, right = 1;
    if (root->left != NULL && root->left->val == root->val + val) {
      left += head_consecutive(root->left, val);
    }
    if (root->right != NULL && root->right->val == root->val + val) {
      right += head_consecutive(root->right, val);
    }
    return max(left, right);
  }
  int helper(TreeNode *root, int &ret) {
    if (root == NULL) {
      return 0;
    }
    int v = 1;
    int lefti = 0, leftd = 0, righti = 0, rightd = 0;
    if (root->left != NULL && root->left->val == root->val + 1) {
      lefti = head_consecutive(root->left, 1);

      v = max(lefti + 1, v);
    }

    else if (root->left != NULL && root->left->val == root->val - 1) {
      leftd = head_consecutive(root->left, -1);
      v = max(leftd + 1, v);
    }

    if (root->right != NULL && root->right->val == root->val - 1) {
      rightd = head_consecutive(root->right, -1);
      v = max(v, 1 + lefti + rightd);
    } else if (root->right != NULL && root->right->val == root->val + 1) {
      righti = head_consecutive(root->right, 1);
      v = max(v, righti + 1 + leftd);
    }
    v = max(v, max(helper(root->left, ret), helper(root->right, ret)));
    ret = max(ret, v);
    return v;
  }
  int longestConsecutive(TreeNode *root) {
    int ret = 0;
    helper(root, ret);
    return ret;
  }
};