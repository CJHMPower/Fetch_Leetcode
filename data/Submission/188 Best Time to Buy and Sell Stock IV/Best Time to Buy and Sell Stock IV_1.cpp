//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 188 Best Time to Buy and Sell Stock IV
// https://leetcode.com//problems/best-time-to-buy-and-sell-stock-iv/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 9 ms
// This solution defeats 24.68% cpp solutions

class Solution {
 public:
  int maxProfit(int k, vector<int>& prices) {
    if (prices.size() < 2) {
      return 0;
    }
    int n = prices.size();
    if (k > n / 2) {
      return quick_solve(k, prices);
    }
    vector<vector<int>> dp(k + 1, vector<int>(n, 0));
    for (int i = 1; i <= k; i++) {
      int pmax = -prices[0];
      for (int j = 1; j < n; j++) {
        dp[i][j] = max(dp[i][j - 1], pmax + prices[j]);
        pmax = max(pmax, dp[i - 1][j - 1] - prices[j]);
      }
    }
    return dp[k][n - 1];
  }
  int quick_solve(int k, vector<int>& prices) {
    int profit = 0;
    for (int i = 0; i < prices.size() - 1; i++) {
      profit = max(profit, profit + prices[i + 1] - prices[i]);
    }
    return profit;
  }
};