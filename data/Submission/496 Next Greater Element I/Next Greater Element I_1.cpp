//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 496 Next Greater Element I
// https://leetcode.com//problems/next-greater-element-i/description/
// Fetched at 2018-07-24
// Submitted 3 months, 3 weeks ago
// Runtime: 10 ms
// This solution defeats 10.48% cpp solutions

class Solution {
 public:
  vector<int> nextGreaterElement(vector<int>& findNums, vector<int>& nums) {
    if (findNums.empty()) {
      return vector<int>();
    }
    vector<int> ret(findNums.size(), 0);
    stack<int> st;
    st.push(nums.back());
    map<int, int> hash;
    hash[nums.back()] = -1;
    for (int i = nums.size() - 2; i >= 0; i--) {
      int count = 1;
      while (!st.empty() && st.top() < nums[i]) {
        st.pop();
        count++;
      }
      if (st.empty()) {
        hash[nums[i]] = -1;
      } else {
        hash[nums[i]] = st.top();
      }
      st.push(nums[i]);
    }
    for (int i = 0; i < findNums.size(); i++) {
      ret[i] = hash[findNums[i]];
    }
    return ret;
  }
};