//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 523 Continuous Subarray Sum
// https://leetcode.com//problems/continuous-subarray-sum/description/
// Fetched at 2018-07-24
// Submitted 3 months, 1 week ago
// Runtime: 28 ms
// This solution defeats 34.03% cpp solutions

class Solution {
 public:
  bool checkSubarraySum(vector<int>& nums, int k) {
    k = abs(k);
    if (nums.size() < 2) {
      return false;
    }
    map<int, int> hash;
    hash[0] = -1;
    int sum = 0;
    int count = 0;
    for (int i = 0; i < nums.size(); i++) {
      if (nums[i] != 0) {
        sum += nums[i];
        hash[sum] = i;
        count = 0;
      } else if (k == 0) {
        count++;
        if (count > 1) {
          return true;
        }
      }

      if (k != 0 && i >= 1 && sum % k == 0) {
        return true;
      }
      int num = sum;
      while (num >= 0) {
        if (hash.find(num) != hash.end() && i - hash[num] > 1) {
          return true;
        }
        if (k == 0) {
          break;
        }
        num -= k;
      }
    }
    return false;
  }
};