//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 234 Palindrome Linked List
// https://leetcode.com//problems/palindrome-linked-list/description/
// Fetched at 2018-07-24
// Submitted 2 years, 2 months ago
// Runtime: 28 ms
// This solution defeats 5.32% cpp solutions

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
 public:
  bool isPalindrome(ListNode* head) {
    if (head == nullptr) return true;
    int len = 0;
    ListNode* p = head;
    ListNode* tail = nullptr;
    while (p != nullptr) {
      len++;
      if (p->next == nullptr) tail = p;
      p = p->next;
    }
    if (len == 1) return true;
    p = head;
    for (int i = 0; i < len / 2; i++) {
      p = p->next;
    }
    ListNode* newhead = p;
    ListNode* p1 = newhead;
    ListNode* p2 = newhead->next;
    ListNode* temp = nullptr;
    newhead->next = nullptr;
    while (p2 != nullptr) {
      temp = p2->next;
      p2->next = p1;
      p1 = p2;
      p2 = temp;
    }
    p1 = head;
    p2 = tail;
    while (p1 != p2 && p2 != nullptr) {
      if (p1->val != p2->val) return false;
      p1 = p1->next;
      p2 = p2->next;
    }
    return true;
  }
};