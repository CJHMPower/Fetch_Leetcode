//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 548 Split Array with Equal Sum
// https://leetcode.com//problems/split-array-with-equal-sum/description/
// Fetched at 2018-07-24
// Submitted 2 months, 1 week ago
// Runtime: 156 ms
// This solution defeats 13.12% cpp solutions

class Solution {
 public:
  pair<int, int> find_sum(vector<int>& dp, int start, int target, int remain,
                          map<int, vector<int>>& sum) {
    if (start >= dp.size()) {
      return make_pair(-1, -1);
    }
    for (int i = start; i < dp.size() - remain; i++) {
      if (sum.find(target + dp[i - 1]) == sum.end()) {
        continue;
      } else {
        for (auto j : sum[target + dp[i - 1]]) {
          if (j >= i) {
            return make_pair(i, j);
          }
        }
      }
    }
    return make_pair(-1, -1);
  }
  bool splitArray(vector<int>& nums) {
    int n = nums.size();
    if (n < 7) {
      return false;
    }
    map<int, vector<int>> sum;
    vector<int> dp(n, 0);
    dp[0] = nums[0];
    sum[nums[0]] = vector<int>(1, 0);
    for (int i = 1; i < n; i++) {
      dp[i] = dp[i - 1] + nums[i];
      if (sum.find(dp[i]) == sum.end()) {
        sum[dp[i]] = vector<int>();
      }
      sum[dp[i]].push_back(i);
    }
    int target;
    for (int i = 0; i <= n - 7; i++) {
      target = dp[i];
      pair<int, int> interval2 = find_sum(dp, i + 2, target, 4, sum);
      /*cout<<"2"<<" "<<interval2.first<<" "<<interval2.second<<endl;*/
      if (interval2.first == -1) {
        continue;
      }
      pair<int, int> interval3 =
          find_sum(dp, interval2.second + 2, target, 2, sum);
      /*cout<<"3"<<" "<<interval3.first<<" "<<interval3.second<<endl;*/
      if (interval3.first == -1) {
        continue;
      }
      if (dp[n - 1] - dp[interval3.second + 1] == target) {
        return true;
      }
    }
    return false;
  }
};