//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 143 Reorder List
// https://leetcode.com//problems/reorder-list/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 68 ms
// This solution defeats 10.52% cpp solutions

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
 public:
  void reorderList(ListNode* head) {
    if (head == nullptr || head->next == nullptr) {
      return;
    }
    ListNode* p1 = head;
    ListNode* p2 = head;
    int size = 1;
    while (p2->next != nullptr) {
      p2 = p2->next;
      size++;
    }
    stack<ListNode*> Q;
    ListNode* r = p1;
    int i = 0;
    while (i < size / 2) {
      i++;
      r = r->next;
    }
    while (r->next != nullptr) {
      Q.push(r);
      r = r->next;
    }
    ListNode* temp = p1->next;
    while (!Q.empty()) {
      temp = p1->next;
      p1->next = p2;
      p2->next = temp;
      p1 = temp;
      p2 = Q.top();
      Q.pop();
    }
    p2->next = nullptr;
  }
};