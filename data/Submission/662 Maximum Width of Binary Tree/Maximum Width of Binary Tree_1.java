// -*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 662 Maximum Width of Binary Tree
// https://leetcode.com//problems/maximum-width-of-binary-tree/description/
// Fetched at 2018-07-24
// Submitted 1 month, 2 weeks ago
// Runtime: 6 ms
// This solution defeats 88.76% java solutions

/**
 * Definition for a binary tree node. public class TreeNode { int val; TreeNode left; TreeNode
 * right; TreeNode(int x) { val = x; } }
 */
class Solution {
  public void width(
      TreeNode root, int dist, int depth, ArrayList<Integer> left, ArrayList<Integer> right) {
    if (root == null) {
      return;
    }
    if (depth >= left.size()) {
      left.add(dist);
      right.add(dist);
    } else if (dist < left.get(depth)) {
      left.set(depth, dist);
    } else if (dist > right.get(depth)) {
      right.set(depth, dist);
    }
    width(root.left, 2 * dist - 1, depth + 1, left, right);
    width(root.right, 2 * dist, depth + 1, left, right);
  }

  public int widthOfBinaryTree(TreeNode root) {
    ArrayList<Integer> left = new ArrayList<>();
    ArrayList<Integer> right = new ArrayList<>();
    width(root, 0, 0, left, right);
    int ret = 0;
    for (int i = 0; i < left.size(); i++) {
      ret = Math.max(ret, right.get(i) - left.get(i) + 1);
    }
    return ret;
  }
}
