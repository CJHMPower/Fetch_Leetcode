//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 254 Factor Combinations
// https://leetcode.com//problems/factor-combinations/description/
// Fetched at 2018-07-24
// Submitted 3 months ago
// Runtime: 52 ms
// This solution defeats 52.41% cpp solutions

class Solution {
 public:
  void backtrace(vector<int>& candidates, vector<int>& nums,
                 vector<vector<int>>& ret, int target) {
    if (target < 1) {
      return;
    }
    if (target == 1) {
      ret.push_back(nums);
      return;
    }
    for (int i = 0; i < candidates.size(); i++) {
      if (target % candidates[i] == 0 &&
          (nums.empty() || candidates[i] >= nums.back())) {
        nums.push_back(candidates[i]);
        backtrace(candidates, nums, ret, target / candidates[i]);
        nums.pop_back();
      }
    }
  }

  vector<vector<int>> getFactors(vector<int>& factors, int target) {
    vector<vector<int>> ret;

    vector<int> nums;
    backtrace(factors, nums, ret, target);
    return ret;
  }

  vector<vector<int>> getFactors(int n) {
    vector<int> factors;
    for (int i = 2; i <= n / 2; i++) {
      if (n % i == 0) {
        factors.push_back(i);
      }
    }
    if (factors.size() == 0) {
      return vector<vector<int>>();
    }
    return getFactors(factors, n);
  }
};