//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 160 Intersection of Two Linked Lists
// https://leetcode.com//problems/intersection-of-two-linked-lists/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 52 ms
// This solution defeats 5.51% cpp solutions

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
 public:
  ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
    if (headA == nullptr || headB == nullptr) {
      return nullptr;
    }
    int sizea = 1, sizeb = 1;
    ListNode *pa = headA;
    ListNode *pb = headB;
    while (pa->next != nullptr) {
      pa = pa->next;
      sizea++;
    }
    while (pb->next != nullptr) {
      pb = pb->next;
      sizeb++;
    }
    if (pa != pb) {
      return nullptr;
    }
    pa = headA;
    pb = headB;
    if (sizea < sizeb) {
      int i = 0;
      while (i < sizeb - sizea) {
        pb = pb->next;
        i++;
      }
    } else {
      int i = 0;
      while (i < sizea - sizeb) {
        pa = pa->next;
        i++;
      }
    }
    while (pa != pb) {
      pa = pa->next;
      pb = pb->next;
    }
    return pa;
  }
};