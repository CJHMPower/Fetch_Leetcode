//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 801 Is Graph Bipartite
// https://leetcode.com//problems/is-graph-bipartite/description/
// Fetched at 2018-07-24
// Submitted 2 months, 2 weeks ago
// Runtime: 25 ms
// This solution defeats 6.99% cpp solutions

class Solution {
 public:
  bool BFS(vector<vector<int>>& graph, vector<int>& visited, int i) {
    queue<int> bfs;
    bfs.push(i);
    visited[i] = 1;
    while (!bfs.empty()) {
      int t = bfs.front();
      bfs.pop();
      for (auto a : graph[t]) {
        if (visited[a] == visited[t]) {
          return false;
        } else if (visited[a] == 0) {
          visited[a] = (visited[t] + 2) % 2 + 1;
          bfs.push(a);
        }
      }
    }
    return true;
  }
  bool isBipartite(vector<vector<int>>& graph) {
    int n = graph.size();
    vector<int> visited(n, 0);

    for (int i = 0; i < n; i++) {
      if (visited[i] == 0) {
        bool result = BFS(graph, visited, i);
        if (result == false) {
          return false;
        }
      }
    }
    return true;
  }
};