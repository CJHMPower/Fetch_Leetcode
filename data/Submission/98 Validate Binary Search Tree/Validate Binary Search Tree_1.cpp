//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 98 Validate Binary Search Tree
// https://leetcode.com//problems/validate-binary-search-tree/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 13 ms
// This solution defeats 2.77% cpp solutions

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
 public:
  vector<int> seq;
  void inorder(TreeNode* root) {
    if (root != nullptr) {
      inorder(root->left);
      seq.push_back(root->val);
      inorder(root->right);
    }
  }
  bool isValidBST(TreeNode* root) {
    if (root == nullptr) {
      return true;
    }
    inorder(root);
    for (int i = 1; i < seq.size(); i++) {
      if (seq[i] == seq[i - 1]) {
        return false;
      }
    }
    return is_sorted(seq.begin(), seq.end());
  }
};