//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 139 Word Break
// https://leetcode.com//problems/word-break/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 80 ms
// This solution defeats 1.31% cpp solutions

class Solution {
 public:
  bool wordBreak(string s, unordered_set<string>& wordDict) {
    if (s.empty()) {
      return false;
    }
    if (wordDict.find(s) != wordDict.end()) {
      return true;
    }
    vector<vector<bool>> dp(s.size(), vector<bool>(s.size(), false));
    dp[0][0] = !(wordDict.find(s.substr(0, 1)) == wordDict.end());
    for (int i = 1; i < s.size(); i++) {
      dp[0][i] = !(wordDict.find(s.substr(0, i)) == wordDict.end());
      dp[i][i] = !(wordDict.find(s.substr(i, 1)) == wordDict.end());
    }
    int j = 0;
    for (int j = 0; j < s.size(); j++) {
      for (int i = 0; j + i < s.size(); i++) {
        if (wordDict.find(s.substr(i, j + 1)) != wordDict.end()) {
          dp[i][i + j] = true;
          continue;
        }
        int k = i;
        while (k + 1 <= i + j) {
          if (dp[i][k] == true && dp[k + 1][i + j] == true) {
            dp[i][i + j] = true;
            break;
          }
          k++;
        }
        if (k + 1 > i + j) {
          dp[i][i + j] = false;
        }
      }
    }
    return dp[0][s.size() - 1];
  }
};