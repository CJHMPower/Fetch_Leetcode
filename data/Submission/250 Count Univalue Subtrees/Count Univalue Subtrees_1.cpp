//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 250 Count Univalue Subtrees
// https://leetcode.com//problems/count-univalue-subtrees/description/
// Fetched at 2018-07-24
// Submitted 2 months, 1 week ago
// Runtime: 5 ms
// This solution defeats 1.19% cpp solutions

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
 public:
  int ret = 0;
  bool isUni(TreeNode* root) {
    if (root == NULL) {
      return true;
    }
    bool left = isUni(root->left);
    bool right = isUni(root->right);
    if (root->left == NULL) {
      if (root->right == NULL) {
        ret++;
        return true;
      } else if (right == true && root->val == root->right->val) {
        ret++;
        return true;
      }
    } else if (root->right == NULL) {
      if (left == true && root->val == root->left->val) {
        ret++;
        return true;
      }
    } else {
      if (left == true && right == true && root->val == root->left->val &&
          root->right->val == root->val) {
        ret++;
        return true;
      }
    }
    return false;
  }
  int countUnivalSubtrees(TreeNode* root) {
    isUni(root);
    return ret;
  }
};