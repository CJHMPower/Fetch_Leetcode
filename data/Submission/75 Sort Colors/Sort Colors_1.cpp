//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 75 Sort Colors
// https://leetcode.com//problems/sort-colors/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 3 ms
// This solution defeats 4.71% cpp solutions

class Solution {
 public:
  int partition(vector<int>& nums, int l, int r) {
    int i = l + 1;
    int x = nums[l];
    for (int j = l + 1; j <= r; j++) {
      if (nums[j] < x) {
        swap(nums[i], nums[j]);
        i++;
      }
    }
    swap(nums[i - 1], nums[l]);
    return i - 1;
  }
  void quick_sort(vector<int>& nums, int l, int r) {
    if (l < r) {
      int p = partition(nums, l, r);
      quick_sort(nums, l, p - 1);
      quick_sort(nums, p + 1, r);
    }
  }
  void sortColors(vector<int>& nums) { quick_sort(nums, 0, nums.size() - 1); }
};