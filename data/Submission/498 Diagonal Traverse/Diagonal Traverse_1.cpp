//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 498 Diagonal Traverse
// https://leetcode.com//problems/diagonal-traverse/description/
// Fetched at 2018-07-24
// Submitted 3 months, 3 weeks ago
// Runtime: 104 ms
// This solution defeats 15.4% cpp solutions

class Solution {
 public:
  static bool cmp(pair<int, int>& a, pair<int, int>& b) {
    int suma = a.first + a.second;
    int sumb = b.first + b.second;
    if (suma != sumb) {
      return suma < sumb;
    }
    if (suma % 2 == 1) {
      return a.first < b.first;
    } else {
      return a.first > b.first;
    }
  }

  vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {
    if (matrix.empty()) {
      return vector<int>();
    }
    vector<pair<int, int>> coords;
    for (int i = 0; i < matrix.size(); i++) {
      for (int j = 0; j < matrix[i].size(); j++) {
        coords.push_back(make_pair(i, j));
      }
    }

    sort(coords.begin(), coords.end(), cmp);
    vector<int> ret;
    for (auto c : coords) {
      ret.push_back(matrix[c.first][c.second]);
    }
    return ret;
  }
};