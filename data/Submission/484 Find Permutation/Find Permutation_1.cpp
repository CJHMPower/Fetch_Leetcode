//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 484 Find Permutation
// https://leetcode.com//problems/find-permutation/description/
// Fetched at 2018-07-24
// Submitted 3 months, 2 weeks ago
// Runtime: 671 ms

class Solution {
 public:
  vector<int> findPermutation(string s) {
    stack<int> st;
    int n = s.size() + 1;
    for (int i = n; i > 0; i--) {
      st.push(i);
    }
    vector<int> ret;
    vector<int> position(s.size() + 1, 0);
    for (int i = s.size() - 1; i >= 0; i--) {
      if (s[i] == 'I') {
        position[i] = 0;
      } else {
        position[i] = position[i + 1] + 1;
      }
    }

    for (int i = 0; i < s.size(); i++) {
      stack<int> temp;
      int j = 0;
      while (j++ < position[i]) {
        temp.push(st.top());
        st.pop();
      }
      ret.push_back(st.top());
      st.pop();
      while (!temp.empty()) {
        st.push(temp.top());
        temp.pop();
      }
    }
    ret.push_back(st.top());
    return ret;
  }
};