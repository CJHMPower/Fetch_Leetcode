//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 325 Maximum Size Subarray Sum Equals k
// https://leetcode.com//problems/maximum-size-subarray-sum-equals-k/description/
// Fetched at 2018-07-24
// Submitted 3 months, 1 week ago
// Runtime: 55 ms
// This solution defeats 10.69% cpp solutions

class Solution {
 public:
  int maxSubArrayLen(vector<int>& nums, int k) {
    if (nums.empty()) {
      return 0;
    }
    vector<int> dp(nums.size() + 1, 0);
    map<int, vector<int>> hash;
    int ret = 0;
    hash[0] = vector<int>{0};
    for (int i = 1; i <= nums.size(); i++) {
      dp[i] = dp[i - 1] + nums[i - 1];
      if (hash.find(dp[i]) != hash.end()) {
        hash[dp[i]].push_back(i);
      } else {
        hash[dp[i]] = vector<int>{i};
      }
      if (hash.find(dp[i] - k) != hash.end()) {
        ret = max(ret, i - hash[dp[i] - k][0]);
      }
    }

    return ret;
  }
};