//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 350 Intersection of Two Arrays II
// https://leetcode.com//problems/intersection-of-two-arrays-ii/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 12 ms
// This solution defeats 1.93% cpp solutions

class Solution {
 public:
  bool binary_search(vector<int>& nums, int low, int high, int target) {
    int mid;
    while (high >= low) {
      mid = (low + high) / 2;
      if (nums[mid] == target) {
        nums.erase(nums.begin() + mid);
        return true;
      }
      if (nums[mid] > target) {
        high = mid - 1;
      } else {
        low = mid + 1;
      }
    }
    return false;
  }
  vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
    sort(nums1.begin(), nums1.end());
    sort(nums2.begin(), nums2.end());
    if (nums2.size() > nums1.size()) {
      swap(nums1, nums2);
    }
    vector<int> result;
    for (int i = 0; i < nums2.size(); i++) {
      if (binary_search(nums1, 0, nums1.size() - 1, nums2[i]) == true) {
        result.push_back(nums2[i]);
      }
    }
    return result;
  }
};