//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 79 Word Search
// https://leetcode.com//problems/word-search/description/
// Fetched at 2018-07-24
// Submitted 3 months, 1 week ago
// Runtime: 27 ms
// This solution defeats 51.24% cpp solutions

class Solution {
 public:
  bool helper(vector<vector<char>>& board, vector<vector<bool>>& visited, int x,
              int y, string& word, int n) {
    if (n >= word.size()) {
      return true;
    }
    if (x < 0 || y < 0 || x >= board.size() || y >= board[0].size() ||
        visited[x][y] == true || board[x][y] != word[n]) {
      return false;
    }
    visited[x][y] = true;

    if (helper(board, visited, x - 1, y, word, n + 1)) {
      return true;
    }

    if (helper(board, visited, x + 1, y, word, n + 1)) {
      return true;
    }

    if (helper(board, visited, x, y - 1, word, n + 1)) {
      return true;
    }

    if (helper(board, visited, x, y + 1, word, n + 1)) {
      return true;
    }
    visited[x][y] = false;
    return false;
  }

  bool exist(vector<vector<char>>& board, string word) {
    vector<vector<bool>> visited(board.size(),
                                 vector<bool>(board[0].size(), false));
    for (int i = 0; i < board.size(); i++) {
      for (int j = 0; j < board[i].size(); j++) {
        if (helper(board, visited, i, j, word, 0) == true) {
          return true;
        }
      }
    }
    return false;
  }
};