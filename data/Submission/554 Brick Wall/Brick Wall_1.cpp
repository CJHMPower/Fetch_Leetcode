//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 554 Brick Wall
// https://leetcode.com//problems/brick-wall/description/
// Fetched at 2018-07-24
// Submitted 2 months ago
// Runtime: 48 ms
// This solution defeats 4.93% cpp solutions

class Solution {
 public:
  int leastBricks(vector<vector<int>>& wall) {
    int max_val = 0;
    map<int, int> hash;
    int sum = 0;
    for (int i = 0; i < wall.size(); i++) {
      sum = 0;
      for (int j = 0; j < wall[i].size() - 1; j++) {
        sum += wall[i][j];
        if (hash.find(sum) == hash.end()) hash[sum] = 0;
        hash[sum]++;
        if (hash[sum] > max_val) {
          max_val = hash[sum];
        }
      }
    }
    return wall.size() - max_val;
  }
};