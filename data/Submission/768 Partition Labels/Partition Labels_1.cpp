//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 768 Partition Labels
// https://leetcode.com//problems/partition-labels/description/
// Fetched at 2018-07-24
// Submitted 5 months ago
// Runtime: 21 ms
// This solution defeats 2.32% cpp solutions

class Solution {
 public:
  int find_right(string &S, char c, int high) {
    int i = S.size() - 1;
    while (i >= 0 && S[i] != c) {
      if (i <= high) {
        return -1;
      }
      i--;
    }
    return i;
  }
  vector<int> partitionLabels(string S) {
    int low = 0, high = 0;
    vector<int> ret;
    while (high < S.size()) {
      for (int i = low; i <= high; i++) {
        int right_most = find_right(S, S[i], high);
        if (right_most != -1) {
          high = right_most;
        }
      }
      ret.push_back(high - low + 1);
      low = high + 1;
      high = low;
    }
    return ret;
  }
};