//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 311 Sparse Matrix Multiplication
// https://leetcode.com//problems/sparse-matrix-multiplication/description/
// Fetched at 2018-07-24
// Submitted 5 months ago
// Runtime: 21 ms
// This solution defeats 19.16% cpp solutions

class Solution {
 public:
  map<int, map<int, int>> Spares_Matrix(vector<vector<int>>& A) {
    map<int, map<int, int>> A_spares;
    for (int i = 0; i < A.size(); i++) {
      for (int j = 0; j < A[0].size(); j++) {
        if (A[i][j] != 0) {
          A_spares[i][j] = A[i][j];
        }
      }
    }
    return A_spares;
  }
  vector<vector<int>> multiply(vector<vector<int>>& A, vector<vector<int>>& B) {
    map<int, map<int, int>> A_spares = Spares_Matrix(A);
    map<int, map<int, int>> B_spares = Spares_Matrix(B);
    int m = A.size();
    int n = B[0].size();
    vector<vector<int>> ret(m, vector<int>(n, 0));
    for (auto it1 = A_spares.begin(); it1 != A_spares.end(); it1++) {
      for (auto it2 = it1->second.begin(); it2 != it1->second.end(); it2++) {
        if (B_spares.find(it2->first) != B_spares.end()) {
          map<int, int> temp = B_spares[it2->first];
          for (auto it3 = temp.begin(); it3 != temp.end(); it3++) {
            ret[it1->first][it3->first] += it2->second * it3->second;
          }
        }
      }
    }
    return ret;
  }
};