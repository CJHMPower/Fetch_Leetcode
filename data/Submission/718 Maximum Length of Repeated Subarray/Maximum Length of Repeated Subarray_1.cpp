//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 718 Maximum Length of Repeated Subarray
// https://leetcode.com//problems/maximum-length-of-repeated-subarray/description/
// Fetched at 2018-07-24
// Submitted 1 month, 1 week ago
// Runtime: 88 ms
// This solution defeats 54.63% cpp solutions

class Solution {
 public:
  int binarySearch(vector<int>& nums, int target) {
    int low = 0, high = nums.size() - 1, mid = 0;
    while (low <= high) {
      mid = (low + high) / 2;
      if (nums[mid] == target)
        return mid;
      else if (nums[mid] < target)
        low = mid + 1;
      else
        high = mid - 1;
    }
    return low;
  }
  int findLength(vector<int>& A, vector<int>& B) {
    int ret = 0, m = A.size(), n = B.size();
    vector<vector<int>> dp(m, vector<int>(n, 0));
    for (int i = 0; i < m; i++) {
      if (A[i] == B[0]) dp[i][0] = 1;
    }
    for (int i = 0; i < n; i++) {
      if (A[0] == B[i]) dp[0][i] = 1;
    }
    for (int i = 1; i < m; i++) {
      for (int j = 1; j < n; j++) {
        if (A[i] == B[j]) dp[i][j] = dp[i - 1][j - 1] + 1;
        ret = max(ret, dp[i][j]);
      }
    }
    return ret;
  }
};