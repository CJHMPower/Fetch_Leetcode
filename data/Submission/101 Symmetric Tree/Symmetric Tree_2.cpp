//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 101 Symmetric Tree
// https://leetcode.com//problems/symmetric-tree/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 6 ms

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
 public:
  bool isSymmetric(TreeNode* root1, TreeNode* root2) {
    if (root1 == nullptr && root2 == nullptr) {
      return true;
    }
    if ((root1 == nullptr && root2 != nullptr) ||
        root1 != nullptr && root2 == nullptr) {
      return false;
    }
    return root1->val == root2->val && isSymmetric(root1->left, root2->right) &&
           isSymmetric(root1->right, root2->left);
  }
  bool isSymmetric(TreeNode* root) {
    if (root == nullptr) {
      return true;
    }
    return isSymmetric(root->left, root->right);
  }
};