//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 101 Symmetric Tree
// https://leetcode.com//problems/symmetric-tree/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 8 ms

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
 public:
  bool isSymmetric(TreeNode* root) {
    if (root == nullptr) {
      return true;
    }
    if (root->left != nullptr && root->right != nullptr &&
        root->left->val != root->right->val) {
      return false;
    }
    vector<int> mid_visit;
    stack<TreeNode*> Q;
    TreeNode* p = root;
    while (!Q.empty() || p != nullptr) {
      while (p != nullptr) {
        Q.push(p);
        p = p->left;
      }
      if (!Q.empty()) {
        p = Q.top();
        Q.pop();
        mid_visit.push_back(p->val);
        p = p->right;
      }
    }
    int low = 0, high = mid_visit.size() - 1;
    while (high > low) {
      if (mid_visit[low] != mid_visit[high]) {
        return false;
      } else {
        low++;
        high--;
      }
    }
    return true;
  }
};