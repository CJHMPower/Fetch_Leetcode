//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 108 Convert Sorted Array to Binary Search Tree
// https://leetcode.com//problems/convert-sorted-array-to-binary-search-tree/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 24 ms
// This solution defeats 11.09% cpp solutions

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
 public:
  TreeNode* sortedArrayToBST(vector<int>& nums) {
    if (nums.empty()) {
      return nullptr;
    }
    if (nums.size() == 1) {
      TreeNode* p = (TreeNode*)malloc(sizeof(TreeNode));
      p->left = nullptr;
      p->right = nullptr;
      p->val = nums[0];
      return p;
    }
    TreeNode* root = (TreeNode*)malloc(sizeof(TreeNode));
    root->val = nums[nums.size() / 2];
    vector<int> leftarr(nums.size() / 2);
    copy(nums.begin(), nums.begin() + nums.size() / 2, leftarr.begin());
    vector<int> rightarr(nums.size() - 1 - nums.size() / 2);
    copy(nums.begin() + nums.size() / 2 + 1, nums.end(), rightarr.begin());
    TreeNode* left_sub = sortedArrayToBST(leftarr);
    TreeNode* right_sub = sortedArrayToBST(rightarr);
    root->left = left_sub;
    root->right = right_sub;
    return root;
  }
};