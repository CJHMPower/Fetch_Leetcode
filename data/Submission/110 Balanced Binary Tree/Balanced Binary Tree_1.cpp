//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 110 Balanced Binary Tree
// https://leetcode.com//problems/balanced-binary-tree/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 16 ms
// This solution defeats 5.59% cpp solutions

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
 public:
  int depth(TreeNode* root) {
    if (root == nullptr) {
      return 0;
    }
    return max(depth(root->left), depth(root->right)) + 1;
  }
  bool isBalanced(TreeNode* root) {
    if (root == nullptr) {
      return true;
    }
    if (abs(depth(root->left) - depth(root->right)) > 1) {
      return false;
    }
    if (isBalanced(root->left) == true && isBalanced(root->right) == true) {
      return true;
    } else {
      return false;
    }
  }
};