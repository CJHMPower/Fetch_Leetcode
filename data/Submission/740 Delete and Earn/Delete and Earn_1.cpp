//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 740 Delete and Earn
// https://leetcode.com//problems/delete-and-earn/description/
// Fetched at 2018-07-24
// Submitted 1 month, 1 week ago
// Runtime: 8 ms
// This solution defeats 15.09% cpp solutions

class Solution {
 public:
  int deleteAndEarn(vector<int>& nums) {
    if (nums.empty()) return 0;
    map<int, int> record;
    for (auto a : nums) {
      if (record.find(a) == record.end()) record[a] = 0;
      record[a] += a;
    }
    vector<pair<int, int>> arr(record.size());
    int i = 0;
    for (auto it = record.begin(); it != record.end(); it++) {
      arr[i++] = make_pair(it->first, it->second);
    }
    sort(arr.begin(), arr.end());
    int del = arr[0].second, nodel = 0, temp = 0;
    for (i = 1; i < arr.size(); i++) {
      if (arr[i].first - arr[i - 1].first == 1) {
        temp = nodel;
        nodel = max(nodel, del);
        del = max(nodel, temp + arr[i].second);
      } else {
        nodel = max(del, nodel);
        del = max(del, nodel + arr[i].second);
      }
    }
    return max(del, nodel);
  }
};