//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 377 Combination Sum IV
// https://leetcode.com//problems/combination-sum-iv/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 0 ms
// This solution defeats 100.0% cpp solutions

class Solution {
 public:
  int combinationSum4(vector<int>& nums, int target) {
    vector<int> dp(target + 1, 0);
    sort(nums.begin(), nums.end());
    if (nums.empty() || target < nums[0]) {
      return 0;
    }
    for (auto v : nums) {
      if (v <= target) {
        dp[v] += 1;
      }
    }
    for (int i = nums[0] + 1; i <= target; i++) {
      int j = 0;
      while (j < nums.size() && nums[j] < i) {
        dp[i] += dp[i - nums[j]];
        j++;
      }
    }
    return dp[target];
  }
};