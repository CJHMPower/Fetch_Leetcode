// -*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 500 Keyboard Row
// https://leetcode.com//problems/keyboard-row/description/
// Fetched at 2018-07-24
// Submitted 1 month, 4 weeks ago
// Runtime: 6 ms
// This solution defeats 8.85% java solutions

class Solution {
  public String[] findWords(String[] words) {
    HashMap<Character, Integer> map = new HashMap<Character, Integer>();
    char[] row1 = new char[] {'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'};
    char[] row2 = new char[] {'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'};
    char[] row3 = new char[] {'z', 'x', 'c', 'v', 'b', 'n', 'm'};
    for (char c : row1) {
      map.put(c, 1);
    }
    for (char c : row2) {
      map.put(c, 2);
    }
    for (char c : row3) {
      map.put(c, 3);
    }
    ArrayList<String> ret = new ArrayList<String>();
    int value = 0;
    Boolean flag = true;
    for (String word : words) {
      flag = true;
      value = 0;
      for (char c : word.toCharArray()) {
        c = Character.toLowerCase(c);
        if (value == 0) value = map.get(c);
        else if (value != map.get(c)) {
          flag = false;
          break;
        }
      }
      if (flag) ret.add(word);
    }

    return ret.toArray(new String[ret.size()]);
  }
}
