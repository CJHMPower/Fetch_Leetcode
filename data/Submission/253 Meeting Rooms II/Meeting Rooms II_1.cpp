//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 253 Meeting Rooms II
// https://leetcode.com//problems/meeting-rooms-ii/description/
// Fetched at 2018-07-24
// Submitted 5 months ago
// Runtime: 15 ms
// This solution defeats 8.0% cpp solutions

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
 public:
  int minMeetingRooms(vector<Interval>& intervals) {
    if (intervals.empty()) {
      return 0;
    }
    sort(intervals.begin(), intervals.end(),
         [](Interval& a, Interval& b) { return a.start < b.start; });
    vector<vector<Interval>> room;
    room.push_back({intervals[0]});
    for (int i = 1; i < intervals.size(); i++) {
      int j = 0;
      for (; j < room.size(); j++) {
        if (room[j].back().end <= intervals[i].start) {
          room[j].push_back(intervals[i]);
          break;
        }
      }
      if (j >= room.size()) {
        room.push_back({intervals[i]});
      }
    }

    return room.size();
  }
};