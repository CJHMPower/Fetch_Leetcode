//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 284 Peeking Iterator
// https://leetcode.com//problems/peeking-iterator/description/
// Fetched at 2018-07-24
// Submitted 2 years, 1 month ago
// Runtime: 4 ms
// This solution defeats 7.16% cpp solutions

// Below is the interface for Iterator, which is already defined for you.
// **DO NOT** modify the interface for Iterator.
class Iterator {
  struct Data;
  Data* data;

 public:
  Iterator(const vector<int>& nums);
  Iterator(const Iterator& iter);
  virtual ~Iterator();
  // Returns the next element in the iteration.
  int next();
  // Returns true if the iteration has more elements.
  bool hasNext() const;
};

class PeekingIterator : public Iterator {
 public:
  PeekingIterator(const vector<int>& nums) : Iterator(nums) {
    // Initialize any member here.
    // **DO NOT** save a copy of nums and manipulate it directly.
    // You should only use the Iterator interface methods.
  }

  // Returns the next element in the iteration without advancing the iterator.
  int peek() {
    if (peeked == true) {
      return next_val;
    }
    peeked = true;
    next_val = Iterator::next();
    return next_val;
  }

  // hasNext() and next() should behave the same as in the Iterator interface.
  // Override them if needed.
  int next() {
    if (peeked == false) {
      return Iterator::next();
    }
    peeked = false;
    return next_val;
  }

  bool hasNext() const {
    if (peeked == true) {
      return true;
    }
    return Iterator::hasNext();
  }
  bool peeked = false;
  int next_val = 0;
};