//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 366 Find Leaves of Binary Tree
// https://leetcode.com//problems/find-leaves-of-binary-tree/description/
// Fetched at 2018-07-24
// Submitted 5 months ago
// Runtime: 3 ms
// This solution defeats 2.6% cpp solutions

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
 public:
  vector<vector<int>> findLeaves(TreeNode* root) {
    vector<vector<int>> ret;
    if (root == NULL) {
      return ret;
    }
    vector<vector<int>> left = findLeaves(root->left);
    vector<vector<int>> right = findLeaves(root->right);
    int m = max(left.size(), right.size());
    for (int i = 0; i < m; i++) {
      if (i < left.size()) {
        if (i < right.size()) {
          left[i].insert(left[i].begin(), right[i].begin(), right[i].end());
        }
        ret.push_back(left[i]);
      } else {
        ret.push_back(right[i]);
      }
    }
    ret.push_back({root->val});
    return ret;
  }
};