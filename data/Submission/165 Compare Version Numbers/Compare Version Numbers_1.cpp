//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 165 Compare Version Numbers
// https://leetcode.com//problems/compare-version-numbers/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 0 ms
// This solution defeats 100.0% cpp solutions

class Solution {
 public:
  int compareVersion(string version1, string version2) {
    vector<int> l1;
    vector<int> l2;
    int i = 0, j = 0;
    while (i < version1.size()) {
      while (j < version1.size() && version1[j] != '.') {
        j++;
      }
      int v = stoi(version1.substr(i, j - i));
      if (v != 0 || j != version1.size()) {
        l1.push_back(v);
      }
      i = j + 1;
      j = i;
    }
    i = 0;
    j = 0;
    while (i < version2.size()) {
      while (j < version2.size() && version2[j] != '.') {
        j++;
      }
      int v = stoi(version2.substr(i, j - i));
      if (v != 0 || j != version2.size()) {
        l2.push_back(v);
      }
      i = j + 1;
      j = i;
    }
    i = l1.size() - 1;
    while (i >= 0 && l1[i] == 0) {
      i--;
    }
    l1.erase(l1.begin() + i + 1, l1.end());
    i = l2.size() - 1;
    while (i >= 0 && l2[i] == 0) {
      i--;
    }
    l2.erase(l2.begin() + i + 1, l2.end());
    if (l1 == l2) {
      return 0;
    } else if (l1 < l2) {
      return -1;
    }
    return 1;
  }
};