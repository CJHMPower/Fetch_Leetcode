//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 348 Design Tic-Tac-Toe
// https://leetcode.com//problems/design-tic-tac-toe/description/
// Fetched at 2018-07-24
// Submitted 3 months, 1 week ago
// Runtime: 32 ms
// This solution defeats 7.35% cpp solutions

class TicTacToe {
 public:
  /** Initialize your data structure here. */
  TicTacToe(int n) { state = vector<vector<int>>(n, vector<int>(n, 0)); }

  /** Player {player} makes a move at ({row}, {col}).
      @param row The row of the board.
      @param col The column of the board.
      @param player The player, can be either 1 or 2.
      @return The current winning condition, can be either:
              0: No one wins.
              1: Player 1 wins.
              2: Player 2 wins. */
  int move(int row, int col, int player) {
    state[row][col] = player;
    bool flag = true;
    for (int i = 0; i < state.size(); i++) {
      if (state[i][col] != player) {
        flag = false;
        break;
      }
    }
    if (flag) {
      return player;
    }
    flag = true;
    for (int i = 0; i < state[0].size(); i++) {
      if (state[row][i] != player) {
        flag = false;
        break;
      }
    }

    if (flag) {
      return player;
    }
    if (row == col) {
      flag = true;
      for (int i = 0; i < state.size(); i++) {
        if (state[i][i] != player) {
          flag = false;
          break;
        }
      }
      if (flag) {
        return player;
      }
    }
    if (row + col == state.size() - 1) {
      flag = true;
      for (int i = 0; i < state.size(); i++) {
        if (state[i][state.size() - 1 - i] != player) {
          flag = false;
          break;
        }
      }
      if (flag) {
        return player;
      }
    }
    return 0;
  }
  vector<vector<int>> state;
};

/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe obj = new TicTacToe(n);
 * int param_1 = obj.move(row,col,player);
 */