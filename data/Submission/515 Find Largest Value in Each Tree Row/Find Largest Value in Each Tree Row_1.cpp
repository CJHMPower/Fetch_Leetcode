//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 515 Find Largest Value in Each Tree Row
// https://leetcode.com//problems/find-largest-value-in-each-tree-row/description/
// Fetched at 2018-07-24
// Submitted 5 months, 4 weeks ago
// Runtime: 19 ms
// This solution defeats 1.15% cpp solutions

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
 public:
  vector<int> largestValues(TreeNode* root) {
    if (root == NULL) {
      return vector<int>();
    }
    vector<int> left = largestValues(root->left);
    vector<int> right = largestValues(root->right);
    vector<int> ret(max(left.size(), right.size()) + 1, 0);
    ret[0] = root->val;
    if (left.size() < right.size()) {
      for (int i = 0; i < left.size(); i++) {
        ret[1 + i] = max(left[i], right[i]);
      }
      for (int i = left.size(); i < right.size(); i++) {
        ret[1 + i] = right[i];
      }
    } else {
      for (int i = 0; i < right.size(); i++) {
        ret[1 + i] = max(left[i], right[i]);
      }
      for (int i = right.size(); i < left.size(); i++) {
        ret[1 + i] = left[i];
      }
    }
    return ret;
  }
};