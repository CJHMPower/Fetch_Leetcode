//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 447 Number of Boomerangs
// https://leetcode.com//problems/number-of-boomerangs/description/
// Fetched at 2018-07-24
// Submitted 4 months ago
// Runtime: 467 ms
// This solution defeats 7.92% cpp solutions

class Solution {
 public:
  int numberOfBoomerangs(vector<pair<int, int>>& points) {
    int ret = 0;
    map<int, int> distance;
    for (int i = 0; i < points.size(); i++) {
      distance.clear();
      for (int j = 0; j < points.size(); j++) {
        int dist = pow(points[i].first - points[j].first, 2) +
                   pow(points[i].second - points[j].second, 2);
        if (distance.find(dist) == distance.end()) {
          distance[dist] = 1;
        } else {
          ret += 2 * (distance[dist]);
          distance[dist]++;
        }
      }
    }
    return ret;
  }
};