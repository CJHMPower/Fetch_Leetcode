//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 46 Permutations
// https://leetcode.com//problems/permutations/description/
// Fetched at 2018-07-24
// Submitted 3 months, 1 week ago
// Runtime: 13 ms
// This solution defeats 2.15% cpp solutions

class Solution {
 public:
  void backtrace(vector<int>& nums, int low, vector<vector<int>>& ret) {
    if (low >= nums.size()) {
      return;
    }
    if (low + 1 == nums.size()) {
      ret.push_back(nums);
      return;
    }
    backtrace(nums, low + 1, ret);
    int n = ret.size();
    for (int i = 0; i < n; i++) {
      for (int j = low + 1; j < nums.size(); j++) {
        vector<int> temp = ret[i];
        swap(temp[j], temp[low]);
        ret.push_back(temp);
      }
    }
  }
  vector<vector<int>> permute(vector<int>& nums) {
    vector<vector<int>> ret;

    backtrace(nums, 0, ret);
    return ret;
  }
};