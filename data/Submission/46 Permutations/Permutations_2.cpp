//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 46 Permutations
// https://leetcode.com//problems/permutations/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 26 ms

class Solution {
 public:
  vector<vector<int>> permute(vector<int>& nums) {
    vector<vector<int>> result;
    if (nums.empty()) {
      return result;
    }
    if (nums.size() == 1) {
      return {{nums[0]}};
    }
    vector<int> temp;
    vector<vector<int>> cur_result;
    vector<int> per;
    for (int i = 0; i < nums.size(); i++) {
      temp = nums;
      temp.erase(temp.begin() + i);
      cur_result = permute(temp);
      for (int j = 0; j < cur_result.size(); j++) {
        per = cur_result[j];
        per.push_back(nums[i]);
        result.push_back(per);
      }
    }
    return result;
  }
};