//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 778 Reorganize String
// https://leetcode.com//problems/reorganize-string/description/
// Fetched at 2018-07-24
// Submitted 4 months, 4 weeks ago
// Runtime: 5 ms
// This solution defeats 1.19% cpp solutions

class Solution {
 public:
  string reorganizeString(string S) {
    if (S.size() < 2) {
      return S;
    }
    struct cmp {
      bool operator()(pair<char, int>& a, pair<char, int>& b) {
        return a.second < b.second;
      }
    };
    vector<int> hash(26, 0);
    int maxv = 0;
    for (auto c : S) {
      hash[c - 'a']++;
      if (hash[c - 'a'] > maxv) {
        maxv = hash[c - 'a'];
      }
    }
    if (maxv > (S.size() - maxv + 1)) {
      return "";
    }
    priority_queue<pair<char, int>, vector<pair<char, int>>, cmp> q;
    for (int i = 0; i < hash.size(); i++) {
      if (hash[i] != 0) {
        q.push(make_pair(char(i + 'a'), hash[i]));
      }
    }

    string ret;
    while (!q.empty()) {
      auto top1 = q.top();
      q.pop();
      if (q.empty()) {
        ret = ret + top1.first;
        break;
      }
      auto top2 = q.top();
      q.pop();
      ret = ret + top1.first;
      ret = ret + top2.first;
      --top1.second;
      --top2.second;
      if (top1.second != 0) {
        q.push(top1);
      }
      if (top2.second != 0) {
        q.push(top2);
      }
    }
    return ret;
  }
};