//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 47 Permutations II
// https://leetcode.com//problems/permutations-ii/description/
// Fetched at 2018-07-24
// Submitted 3 months ago
// Runtime: 27 ms
// This solution defeats 17.69% cpp solutions

class Solution {
 public:
  void backtrace(vector<int>& nums, int start, int n, vector<vector<int>>& ret,
                 map<int, int>& hash) {
    if (start >= n) {
      ret.push_back(nums);
      return;
    }
    for (auto it = hash.begin(); it != hash.end(); it++) {
      if (it->second > 0) {
        hash[it->first]--;
        nums.push_back(it->first);
        backtrace(nums, start + 1, n, ret, hash);
        nums.pop_back();
        hash[it->first]++;
      }
    }
  }
  vector<vector<int>> permuteUnique(vector<int>& nums) {
    vector<vector<int>> ret;
    vector<int> r;
    map<int, int> hash;
    for (auto c : nums) {
      if (hash.find(c) == hash.end()) hash[c] = 0;
      hash[c]++;
    }
    backtrace(r, 0, nums.size(), ret, hash);
    return ret;
  }
};