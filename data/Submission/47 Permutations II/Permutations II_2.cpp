//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 47 Permutations II
// https://leetcode.com//problems/permutations-ii/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 36 ms
// This solution defeats 15.53% cpp solutions

class Solution {
 public:
  string to_str(vector<int>& nums) {
    string result;
    for (auto v : nums) {
      result = result + to_string(v);
    }
    return result;
  }
  void nextPermutation(vector<int>& nums) {
    if (nums.size() < 2) {
      return;
    }
    if (nums.size() == 2) {
      swap(nums[0], nums[1]);
      return;
    }
    int back = nums.size() - 1;
    int front = nums.size() - 2;
    while (front >= 0 && nums[front] >= nums[back]) {
      front--;
      back--;
    }
    if (front < 0) {
      reverse(nums.begin(), nums.end());
      return;
    }
    int next = back;
    for (int i = back; i < nums.size(); i++) {
      if (nums[i] > nums[front] && nums[i] < nums[next]) {
        next = i;
      }
    }
    swap(nums[front], nums[next]);
    sort(nums.begin() + back, nums.end());
  }
  vector<vector<int>> backtrack(vector<int>& nums, map<string, int>& hash,
                                const int length) {
    vector<vector<int>> result;
    if (nums.empty()) {
      return result;
    }
    if (nums.size() == 1) {
      result.push_back({{nums[0]}});
      vector<int> temp = {nums[0]};
      hash[to_str(temp)]++;
      return result;
    }
    vector<int> temp;
    vector<vector<int>> cur_result;
    vector<int> per;
    for (int i = 0; i < nums.size(); i++) {
      temp = nums;
      temp.erase(temp.begin() + i);
      cur_result = backtrack(temp, hash, length);
      for (int j = 0; j < cur_result.size(); j++) {
        per = cur_result[j];
        per.push_back(nums[i]);
        string s = to_str(per);
        if (s.size() != length || hash[s] == 0) {
          result.push_back(per);
          hash[s]++;
        }
      }
    }
    return result;
  }
  vector<vector<int>> permuteUnique(vector<int>& nums) {
    sort(nums.begin(), nums.end());
    vector<int> temp = nums;
    reverse(temp.begin(), temp.end());
    vector<vector<int>> result;
    if (nums.empty()) {
      return result;
    }
    while (nums != temp) {
      result.push_back(nums);
      nextPermutation(nums);
    }
    result.push_back(nums);
    return result;
  }
};