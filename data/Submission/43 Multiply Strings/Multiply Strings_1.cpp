//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 43 Multiply Strings
// https://leetcode.com//problems/multiply-strings/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 28 ms
// This solution defeats 10.27% cpp solutions

class Solution {
 public:
  string single_multiply(string num, char c) {
    if (c == '0') {
      string temp = "0";
      return temp;
    }
    int up = 0;
    string result;
    for (int i = num.size() - 1; i >= 0; i--) {
      int temp = (int)(num[i] - '0') * (int)(c - '0') + up;
      up = temp / 10;
      result.insert(result.begin(), (char)(temp % 10 + '0'));
    }
    if (up > 0) {
      result.insert(result.begin(), (char)(up + '0'));
    }
    return result;
  }
  string add_string(string num1, string num2) {
    if (num1.empty()) {
      return num2;
    }
    if (num2.empty()) {
      return num1;
    }
    int up = 0;
    string result(max(num1.size(), num2.size()) + 1, '0');
    if (num2.size() > num1.size()) {
      swap(num1, num2);
    }
    int idx1 = num1.size() - 1, idx2 = num2.size() - 1;
    int i = result.size() - 1;
    while (idx2 >= 0) {
      int temp = (num1[idx1] - '0') + (num2[idx2] - '0') + up;
      up = temp / 10;
      result[i] = (char)(temp % 10 + '0');
      idx2--;
      idx1--;
      i--;
    }
    while (idx1 >= 0 && i >= 0) {
      int temp = (num1[idx1] - '0') + up;
      up = temp / 10;
      result[i] = (char)(temp % 10 + '0');
      i--;
      idx1--;
    }
    if (up > 0) {
      result[i] = (char)(up + '0');
    }
    auto it = result.begin();
    while (result.size() > 1 && *it == '0') {
      it = result.erase(it);
    }
    return result;
  }
  string multiply(string num1, string num2) {
    if (num2.size() > num1.size()) {
      swap(num1, num2);
    }
    int idx1 = num1.size() - 1, idx2 = num2.size() - 1;
    string result;
    int i = 0;
    while (idx2 >= 0) {
      string cur = single_multiply(num1, num2[idx2]);
      for (int j = 0; j < i; j++) {
        cur.push_back('0');
      }
      result = add_string(result, cur);
      i++;
      idx2--;
    }
    return result;
  }
};