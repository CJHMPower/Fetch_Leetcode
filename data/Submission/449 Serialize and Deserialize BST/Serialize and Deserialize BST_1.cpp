//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 449 Serialize and Deserialize BST
// https://leetcode.com//problems/serialize-and-deserialize-bst/description/
// Fetched at 2018-07-24
// Submitted 3 months, 2 weeks ago
// Runtime: 87 ms
// This solution defeats 3.5% cpp solutions

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
 public:
  // Encodes a tree to a single string.
  string serialize(TreeNode* root) {
    if (root == NULL) {
      return "";
    }
    string left = serialize(root->left);
    string right = serialize(root->right);
    string result = to_string(root->val);
    if (left != "") {
      result = result + " " + left;
    }
    if (right != "") {
      result = result + " " + right;
    }
    return result;
  }

  // Decodes your encoded data to tree.
  TreeNode* deserialize(string& data, int low, int high) {
    if (high <= low) {
      return NULL;
    }
    TreeNode* root = (TreeNode*)malloc(sizeof(TreeNode));
    int i = low;
    while (i < high && data[i] != ' ') {
      i++;
    }
    int val = stoi(data.substr(low, i));
    root->val = val;
    if (i >= high) {
      root->left = NULL;
      root->right = NULL;
      return root;
    }
    int start = i + 1;
    int cmp = -INT_MAX;
    string cp = "";
    while (start < high) {
      int j = start;
      while (j < high && data[j] != ' ') {
        j++;
      }
      cmp = stoi(data.substr(start, j));
      if (cmp > val) {
        break;
      }
      start = j + 1;
    }
    root->left = deserialize(data, i + 1, start);
    root->right = deserialize(data, start, high);
    return root;
  }
  TreeNode* deserialize(string data) {
    if (data == "") {
      return NULL;
    }
    return deserialize(data, 0, data.size());
  }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));