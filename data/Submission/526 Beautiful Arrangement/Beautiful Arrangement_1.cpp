//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 526 Beautiful Arrangement
// https://leetcode.com//problems/beautiful-arrangement/description/
// Fetched at 2018-07-24
// Submitted 3 months, 1 week ago
// Runtime: 140 ms
// This solution defeats 17.78% cpp solutions

class Solution {
 public:
  int helper(int start, int N, vector<bool>& used) {
    if (start > N) {
      return 1;
    }
    int ret = 0;
    for (int i = 1; i <= N; i++) {
      if (used[i] == false && (i % start == 0 || start % i == 0)) {
        used[i] = true;
        ret += helper(start + 1, N, used);
        used[i] = false;
      }
    }
    return ret;
  }
  int countArrangement(int N) {
    vector<bool> nums;
    for (int i = 0; i <= N; i++) {
      nums.push_back(false);
    }
    return helper(1, N, nums);
  }
};