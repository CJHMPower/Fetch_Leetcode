//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 506 Relative Ranks
// https://leetcode.com//problems/relative-ranks/description/
// Fetched at 2018-07-24
// Submitted 3 months, 3 weeks ago
// Runtime: 16 ms
// This solution defeats 15.76% cpp solutions

class Solution {
 public:
  int binary_search(vector<int>& nums, int target) {
    int low = 0, high = nums.size() - 1;
    int mid;
    while (low <= high) {
      mid = (low + high) / 2;
      if (nums[mid] == target) {
        return mid;
      } else if (nums[mid] > target) {
        low = mid + 1;
      } else {
        high = mid - 1;
      }
    }
    return -1;
  }
  vector<string> findRelativeRanks(vector<int>& nums) {
    vector<int> temp(nums);
    sort(nums.begin(), nums.end(), [](int a, int b) { return a > b; });

    vector<string> ret(nums.size(), "");
    for (int i = 0; i < temp.size(); i++) {
      int idx = binary_search(nums, temp[i]);
      if (idx == 0) {
        ret[i] = "Gold Medal";
      } else if (idx == 1) {
        ret[i] = "Silver Medal";
      } else if (idx == 2) {
        ret[i] = "Bronze Medal";
      } else {
        ret[i] = to_string(idx + 1);
      }
    }
    return ret;
  }
};