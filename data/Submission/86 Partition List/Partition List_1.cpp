//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 86 Partition List
// https://leetcode.com//problems/partition-list/description/
// Fetched at 2018-07-24
// Submitted 5 months, 1 week ago
// Runtime: 7 ms
// This solution defeats 3.96% cpp solutions

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
 public:
  ListNode *partition(ListNode *head, int x) {
    if (head == NULL) {
      return NULL;
    }
    ListNode *p1 = head;
    ListNode *p2 = head;
    ListNode *pre1 = NULL;
    ListNode *pre2 = NULL;
    while (p1 && p2) {
      while (p1 != NULL && p1->val < x) {
        pre1 = p1;
        p1 = p1->next;
      }
      p2 = p1;
      while (p2 != NULL && p2->val >= x) {
        pre2 = p2;
        p2 = p2->next;
      }
      if (p2 == NULL) {
        return head;
      }
      if (p1 == head) {
        head = p2;
      }
      if (pre1 != NULL) {
        pre1->next = p2;
      }
      pre2->next = p2->next;
      p2->next = p1;
      pre1 = p2;
      if (pre2 != NULL) {
        p2 = pre2->next;
      } else {
        break;
      }
    }
    return head;
  }
};