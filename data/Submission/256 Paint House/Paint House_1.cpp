//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 256 Paint House
// https://leetcode.com//problems/paint-house/description/
// Fetched at 2018-07-24
// Submitted 4 months, 4 weeks ago
// Runtime: 7 ms
// This solution defeats 1.62% cpp solutions

class Solution {
 public:
  int minCost(vector<vector<int>>& costs) {
    if (costs.size() == 0) {
      return 0;
    }
    vector<vector<int>> dp(costs.size(), vector<int>(3, 0));
    for (int i = 0; i < 3; i++) {
      dp[0][i] = costs[0][i];
    }
    for (int i = 1; i < costs.size(); i++) {
      dp[i][0] = min(dp[i - 1][1], dp[i - 1][2]) + costs[i][0];
      dp[i][1] = min(dp[i - 1][0], dp[i - 1][2]) + costs[i][1];
      dp[i][2] = min(dp[i - 1][0], dp[i - 1][1]) + costs[i][2];
    }
    int n = costs.size();
    return min(min(dp[n - 1][0], dp[n - 1][1]), dp[n - 1][2]);
  }
};