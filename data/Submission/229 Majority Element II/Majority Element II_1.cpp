//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 229 Majority Element II
// https://leetcode.com//problems/majority-element-ii/description/
// Fetched at 2018-07-24
// Submitted 2 years, 1 month ago
// Runtime: 29 ms

class Solution {
 public:
  vector<int> majorityElement(vector<int>& nums) {
    vector<int> result;
    if (nums.empty()) {
      return result;
    }
    if (nums.size() < 3) {
      auto it = unique(nums.begin(), nums.end());
      result.resize((int)(it - nums.begin()));
      copy(nums.begin(), it, result.begin());
      return result;
    }
    nth_element(nums.begin(), nums.begin() + nums.size() / 3, nums.end());
    nth_element(nums.begin(), nums.begin() + (2 * nums.size() / 3), nums.end());
    int first = nums[nums.size() / 3];
    int second = nums[(2 * nums.size()) / 3];
    int count_first = 0, count_second = 0;
    for (auto x : nums) {
      if (x == first) {
        count_first++;
      } else if (x == second) {
        count_second++;
      }
    }
    if (count_first > nums.size() / 3) result.push_back(first);
    if (count_second > nums.size() / 3) result.push_back(second);
    return result;
  }
};