//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 147 Insertion Sort List
// https://leetcode.com//problems/insertion-sort-list/description/
// Fetched at 2018-07-24
// Submitted 2 years, 2 months ago
// Runtime: 80 ms
// This solution defeats 1.73% cpp solutions

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
 public:
  ListNode* insertionSortList(ListNode* head) {
    if (head == nullptr) return nullptr;
    ListNode* p = head->next;
    head->next = nullptr;
    while (p != nullptr) {
      if (head->next == nullptr) {
        if (head->val < p->val) {
          ListNode* q = p->next;
          head->next = p;
          p->next = nullptr;
          p = q;
        } else {
          ListNode* temp = p->next;
          p->next = head;
          head = p;
          p = temp;
        }
        continue;
      }
      ListNode* index = head;
      if (index->val > p->val) {
        ListNode* q = p->next;
        p->next = index;
        head = p;
        p = q;
        continue;
      }
      while (index->next != nullptr && index->next->val < p->val) {
        index = index->next;
      }
      ListNode* q = p;
      p = p->next;
      q->next = index->next;
      index->next = q;
    }
    return head;
  }
};