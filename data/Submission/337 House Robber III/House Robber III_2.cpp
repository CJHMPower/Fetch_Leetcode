//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 337 House Robber III
// https://leetcode.com//problems/house-robber-iii/description/
// Fetched at 2018-07-24
// Submitted 2 years, 2 months ago
// Runtime: 1096 ms
// This solution defeats 5.19% cpp solutions

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
 public:
  int rob(TreeNode* root) {
    if (root == NULL) return 0;
    if (root->left == NULL) {
      if (root->right == NULL) return root->val;
      int case1 = root->val + rob(root->right->left) + rob(root->right->right);
      int case2 = rob(root->right);
      return case1 > case2 ? case1 : case2;
    }
    if (root->right == NULL) {
      int c1 = root->val + rob(root->left->left) + rob(root->left->right);
      int c2 = rob(root->left);
      return c1 > c2 ? c1 : c2;
    }
    int num1 = root->val + rob(root->left->left) + rob(root->left->right) +
               rob(root->right->left) + rob(root->right->right);
    int num2 = rob(root->left) + rob(root->right);
    return num1 > num2 ? num1 : num2;
  }
};