//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 152 Maximum Product Subarray
// https://leetcode.com//problems/maximum-product-subarray/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 8 ms
// This solution defeats 10.75% cpp solutions

class Solution {
 public:
  int maxProduct(vector<int>& nums) {
    vector<int> left(nums.size(), 1);
    vector<int> right(nums.size(), 1);
    left[0] = nums[0];
    right[nums.size() - 1] = nums[nums.size() - 1];
    int result = max(left[0], right[nums.size() - 1]);
    for (int i = 1; i < nums.size(); i++) {
      if (left[i - 1] == 0) {
        left[i] = nums[i];
      } else {
        left[i] = nums[i] * left[i - 1];
      }
      if (right[nums.size() - i] == 0) {
        right[nums.size() - i - 1] = nums[nums.size() - i - 1];
      } else {
        right[nums.size() - 1 - i] =
            nums[nums.size() - i - 1] * right[nums.size() - i];
      }
      result = max(result, left[i]);
      result = max(result, right[nums.size() - i - 1]);
    }
    return result;
  }
};