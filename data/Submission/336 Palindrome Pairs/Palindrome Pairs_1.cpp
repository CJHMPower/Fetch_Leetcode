//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 336 Palindrome Pairs
// https://leetcode.com//problems/palindrome-pairs/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 979 ms
// This solution defeats 1.81% cpp solutions

class Solution {
 public:
  bool is_palindrome(string& s, int start, int end) {
    string temp = s.substr(start, end - start + 1);
    string tt = temp;
    reverse(temp.begin(), temp.end());
    return temp == tt;
  }
  vector<vector<int>> palindromePairs(vector<string>& words) {
    map<string, int> dict;
    for (int i = 0; i < words.size(); i++) {
      dict[words[i]] = i;
    }
    vector<vector<int>> ret;
    for (int i = 0; i < words.size(); i++) {
      for (int j = 0; j <= words[i].size(); j++) {
        if (is_palindrome(words[i], j, words[i].size() - 1) == true) {
          string suffix = words[i].substr(0, j);
          reverse(suffix.begin(), suffix.end());
          if (dict.find(suffix) != dict.end() && i != dict[suffix]) {
            ret.push_back({i, dict[suffix]});
          }
        }
        if (j > 0 && is_palindrome(words[i], 0, j - 1) == true) {
          string prefix = words[i].substr(j, words.size() - j);
          reverse(prefix.begin(), prefix.end());
          if (dict.find(prefix) != dict.end() && i != dict[prefix]) {
            ret.push_back({dict[prefix], i});
          }
        }
      }
    }
    return ret;
  }
};