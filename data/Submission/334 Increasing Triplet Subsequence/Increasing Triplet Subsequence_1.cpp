//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 334 Increasing Triplet Subsequence
// https://leetcode.com//problems/increasing-triplet-subsequence/description/
// Fetched at 2018-07-24
// Submitted 2 years, 2 months ago
// Runtime: 8 ms
// This solution defeats 5.78% cpp solutions

class Solution {
 public:
  bool increasingTriplet(vector<int>& nums) {
    if (nums.size() < 3) return false;
    int i = 0, j = 1, k = 2;
    auto t = unique(nums.begin(), nums.end());
    int size = (int)(t - nums.begin());
    if (size < 3) return false;
    while (i < size && j < size && k < size) {
      if (nums[i] < nums[j] && nums[j] < nums[k]) {
        return true;
      }
      if (nums[i] == nums[j] && nums[i] == nums[k]) {
        i = k;
        j = k + 1;
        k = k + 2;
        continue;
      }
      if (nums[i] < nums[j] && nums[k] <= nums[i]) {
        for (int m = 1; m < size - k; m++) {
          if (nums[i] < nums[j] && nums[j] < nums[k + m]) return true;
        }
        i = k;
        j = k + 1;
        k = k + 2;
      } else if (nums[k] <= nums[j] && nums[k] >= nums[i]) {
        j = k;
        k = k + 1;
      } else if (nums[k] <= nums[j] && nums[j] <= nums[i]) {
        i = k;
        j = k + 1;
        k = k + 2;
      } else if (nums[j] <= nums[i] && nums[k] >= nums[i]) {
        i = j;
        j = k;
        k = k + 1;
      } else if (nums[j] <= nums[k] && nums[k] <= nums[i]) {
        i = j;
        j = k;
        k = k + 1;
      }
    }
    return false;
  }
};