//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 581 Shortest Unsorted Continuous Subarray
// https://leetcode.com//problems/shortest-unsorted-continuous-subarray/description/
// Fetched at 2018-07-24
// Submitted 3 months, 2 weeks ago
// Runtime: 43 ms
// This solution defeats 5.74% cpp solutions

class Solution {
 public:
  int findUnsortedSubarray(vector<int>& nums) {
    int min_val = INT_MAX;
    int max_val = -INT_MAX;
    int low = 0, high = 0;
    vector<int> min_record(nums.size(), 0);
    vector<int> max_record(nums.size(), 0);

    for (int i = nums.size() - 1; i >= 0; i--) {
      min_record[i] = min(min_val, nums[i]);
      min_val = min_record[i];
    }
    for (int i = 0; i < nums.size(); i++) {
      max_record[i] = max(max_val, nums[i]);
      max_val = max_record[i];
    }
    for (int i = 0; i < nums.size(); i++) {
      if (nums[i] != min_record[i]) {
        low = i;
        break;
      }
    }
    for (int i = nums.size() - 1; i >= 0; i--) {
      if (nums[i] != max_record[i]) {
        high = i;
        break;
      }
    }
    if (high != low) {
      return high - low + 1;
    } else {
      return 0;
    }
  }
};