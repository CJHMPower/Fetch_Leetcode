//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 386 Lexicographical Numbers
// https://leetcode.com//problems/lexicographical-numbers/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 512 ms
// This solution defeats 2.1% cpp solutions

class Solution {
 public:
  vector<int> lexicalOrder(int n) {
    vector<int> result;
    bool add1 = false;
    if (n == 1) {
      return {1};
    }
    int bits = 0;
    while (pow(10, bits) <= n) {
      result.push_back(pow(10, bits));
      bits++;
    }
    add1 = true;
    int num = result.back();
    while (result.size() < n) {
      if (add1) {
        num += 1;
        while (num % 10 == 0) {
          num /= 10;
          add1 = false;
        }
      } else {
        if (num * 10 <= n) {
          num *= 10;
        } else {
          add1 = true;
          continue;
        }
      }
      if (num <= n)
        result.push_back(num);
      else {
        num--;
        num /= 10;
        num++;
        result.push_back(num);
      }
    }
    return result;
  }
};