//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 351 Android Unlock Patterns
// https://leetcode.com//problems/android-unlock-patterns/description/
// Fetched at 2018-07-24
// Submitted 1 month, 2 weeks ago
// Runtime: 44 ms
// This solution defeats 33.21% cpp solutions

class Solution {
 public:
  bool reachable(vector<bool>& visited, int x, int i) {
    if (visited[i] == true) {
      return false;
    }
    if (x == 5) {
      return true;
    }
    if (x + i == 10) {
      return visited[5] == true;
    }
    if (x == 1) {
      if (i == 3) {
        return visited[2] == true;
      } else if (i == 7) {
        return visited[4] == true;
      }
    } else if (x == 3) {
      if (i == 1) {
        return visited[2] == true;
      } else if (i == 9) {
        return visited[6] == true;
      }
    } else if (x == 7) {
      if (i == 1) {
        return visited[4] == true;
      } else if (i == 9) {
        return visited[8] == true;
      }
    } else if (x == 9) {
      if (i == 3) {
        return visited[6] == true;
      } else if (i == 7) {
        return visited[8] == true;
      }
    }
    return true;
  }
  int DFS(vector<bool>& visited, int x, int times, int m, int n) {
    if (visited[x] == true || times <= 0) {
      return 0;
    }
    visited[x] = true;
    int ret = 0;
    if (n - times + 1 >= m) {
      ret++;
    }
    for (int i = 1; i <= 9; i++) {
      if (reachable(visited, x, i)) {
        ret += DFS(visited, i, times - 1, m, n);
      }
    }
    visited[x] = false;
    return ret;
  }
  int numberOfPatterns(int m, int n) {
    vector<bool> visited(10, false);
    int timesm = 0;
    for (int i = 1; i <= 9; i++) {
      timesm += DFS(visited, i, n, m, n);
    }
    return timesm;
  }
};