//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 304 Range Sum Query 2D - Immutable
// https://leetcode.com//problems/range-sum-query-2d---immutable/description/
// Fetched at 2018-07-24
// Submitted 2 years, 1 month ago
// Runtime: 116 ms
// This solution defeats 4.13% cpp solutions

class NumMatrix {
 public:
  NumMatrix(vector<vector<int>> &matrix) {
    if (matrix.empty()) {
      return;
    }
    sum.resize(matrix.size(), vector<int>(matrix[0].size(), 0));
    sum[0][0] = matrix[0][0];
    for (int i = 1; i < matrix[0].size(); i++) {
      sum[0][i] = sum[0][i - 1] + matrix[0][i];
    }
    for (int i = 1; i < matrix.size(); i++) {
      sum[i][0] = sum[i - 1][0] + matrix[i][0];
    }
    for (int i = 1; i < matrix.size(); i++)
      for (int j = 1; j < matrix[0].size(); j++) {
        int k = 0;
        while (k <= i - 1) sum[i][j] += matrix[k++][j];
        k = 0;
        while (k <= j - 1) sum[i][j] += matrix[i][k++];
        sum[i][j] += sum[i - 1][j - 1];
        sum[i][j] += matrix[i][j];
      }
  }
  int sumRegion(int row1, int col1, int row2, int col2) {
    if (row1 == 0 && col1 == 0)
      return sum[row2][col2];
    else if (row1 == 0) {
      return sum[row2][col2] - sum[row2][col1 - 1];
    } else if (col1 == 0) {
      return sum[row2][col2] - sum[row1 - 1][col2];
    }
    return sum[row2][col2] + sum[row1 - 1][col1 - 1] - sum[row1 - 1][col2] -
           sum[row2][col1 - 1];
  }

 private:
  vector<vector<int>> sum;
};

// Your NumMatrix object will be instantiated and called as such:
// NumMatrix numMatrix(matrix);
// numMatrix.sumRegion(0, 1, 2, 3);
// numMatrix.sumRegion(1, 2, 3, 4);