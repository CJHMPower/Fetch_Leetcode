// -*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 698 Partition to K Equal Sum Subsets
// https://leetcode.com//problems/partition-to-k-equal-sum-subsets/description/
// Fetched at 2018-07-24
// Submitted 1 month, 1 week ago
// Runtime: 10 ms
// This solution defeats 59.66% java solutions

class Solution {

  private boolean canPartition(
      int[] nums, boolean[] visited, int start_index, int k, int cur_sum, int cur_num, int target) {
    if (k == 1) return true;
    if (cur_sum == target && cur_num > 0)
      return canPartition(nums, visited, 0, k - 1, 0, 0, target);
    for (int i = start_index; i < nums.length; i++) {
      if (!visited[i]) {
        visited[i] = true;
        if (canPartition(nums, visited, i + 1, k, cur_sum + nums[i], cur_num++, target))
          return true;
        visited[i] = false;
      }
    }
    return false;
  }

  public boolean canPartitionKSubsets(int[] nums, int k) {
    int sum = 0;
    for (int a : nums) sum += a;
    if (sum % k != 0) return false;
    int target = sum / k;
    boolean[] visited = new boolean[nums.length];
    return canPartition(nums, visited, 0, k, 0, 0, target);
  }
}
