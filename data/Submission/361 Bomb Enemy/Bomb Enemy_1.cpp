//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 361 Bomb Enemy
// https://leetcode.com//problems/bomb-enemy/description/
// Fetched at 2018-07-24
// Submitted 3 months, 2 weeks ago
// Runtime: 39 ms
// This solution defeats 6.29% cpp solutions

class Solution {
 public:
  int maxKilledEnemies(vector<vector<char>>& grid) {
    if (grid.empty()) {
      return 0;
    }
    int m = grid.size(), n = grid[0].size();
    vector<vector<pair<int, int>>> dp1(
        m, vector<pair<int, int>>(n, make_pair(0, 0)));
    for (int i = 0; i < m; i++) {
      for (int j = 0; j < n; j++) {
        if (grid[i][j] == 'E') {
          if (i - 1 >= 0) {
            dp1[i][j].second = dp1[i - 1][j].second + 1;
          } else {
            dp1[i][j].second = 1;
          }
          if (j - 1 >= 0) {
            dp1[i][j].first = dp1[i][j - 1].first + 1;
          } else {
            dp1[i][j].first = 1;
          }
        } else if (grid[i][j] == '0') {
          if (i - 1 >= 0) {
            dp1[i][j].second = dp1[i - 1][j].second;
          } else {
            dp1[i][j].second = 0;
          }
          if (j - 1 >= 0) {
            dp1[i][j].first = dp1[i][j - 1].first;
          } else {
            dp1[i][j].first = 0;
          }
        }
      }
    }
    int ret = 0;
    vector<vector<pair<int, int>>> dp2(
        m, vector<pair<int, int>>(n, make_pair(0, 0)));
    for (int i = m - 1; i >= 0; i--) {
      for (int j = n - 1; j >= 0; j--) {
        if (grid[i][j] == 'E') {
          if (i + 1 < m) {
            dp2[i][j].second = dp2[i + 1][j].second + 1;
          } else {
            dp2[i][j].second = 1;
          }
          if (j + 1 < n) {
            dp2[i][j].first = dp2[i][j + 1].first + 1;
          } else {
            dp2[i][j].first = 1;
          }
        } else if (grid[i][j] == '0') {
          if (i + 1 < m) {
            dp2[i][j].second = dp2[i + 1][j].second;
          } else {
            dp2[i][j].second = 0;
          }
          if (j + 1 < n) {
            dp2[i][j].first = dp2[i][j + 1].first;
          } else {
            dp2[i][j].first = 0;
          }
        }
        if (grid[i][j] == '0') {
          ret = max(ret, dp1[i][j].first + dp1[i][j].second + dp2[i][j].first +
                             dp2[i][j].second);
        }
      }
    }
    return ret;
  }
};