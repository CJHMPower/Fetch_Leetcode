//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 33 Search in Rotated Sorted Array
// https://leetcode.com//problems/search-in-rotated-sorted-array/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 4 ms
// This solution defeats 98.21% cpp solutions

class Solution {
 public:
  int search(vector<int>& nums, int target) {
    if (nums.empty()) {
      return -1;
    }
    if (nums.size() == 1) {
      return nums[0] == target ? 0 : -1;
    }
    int low = 0, high = nums.size() - 1;
    int mid = low;
    while (nums[low] > nums[high]) {
      if (high - low == 1) {
        mid = high;
        break;
      }
      mid = (low + high) / 2;
      if (nums[low] < nums[mid]) {
        low = mid;
      } else if (nums[mid] < nums[high]) {
        high = mid;
      }
    }
    if (target < nums[mid]) {
      return -1;
    }
    low = 0;
    high = nums.size() - 1;
    if (nums[low] == target) {
      return low;
    }
    if (nums[high] == target) {
      return high;
    }
    if (nums[mid] == target) {
      return mid;
    }
    if (mid == high) {
      high--;
    } else if (mid != 0) {
      if (target > nums[low]) {
        high = mid - 1;
      } else if (target < nums[high]) {
        low = mid;
      } else {
        return -1;
      }
    }
    while (low <= high) {
      mid = (low + high) / 2;
      if (nums[mid] == target) {
        return mid;
      } else if (nums[mid] > target) {
        high = mid - 1;
      } else {
        low = mid + 1;
      }
    }
    return -1;
  }
};