//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 270 Closest Binary Search Tree Value
// https://leetcode.com//problems/closest-binary-search-tree-value/description/
// Fetched at 2018-07-24
// Submitted 5 months, 1 week ago
// Runtime: 9 ms
// This solution defeats 1.07% cpp solutions

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
 public:
  int closestValue(TreeNode *root, double target) {
    TreeNode *p = root;
    TreeNode *front1 = p;
    TreeNode *front2 = p;
    int ret = 0;
    double eps = pow(2, 38) - 1;
    while (p) {
      if (p->val < target) {
        front1 = p;
        p = p->right;
        front2 = p;
        if (fabs(front1->val - target) < eps) {
          ret = front1->val;
          eps = fabs(front1->val - target);
        }
        if (front2 != NULL && fabs(front2->val - target) < eps) {
          ret = front2->val;
          eps = fabs(front2->val - target);
        }
      } else {
        front1 = p;
        p = p->left;
        front2 = p;
        if (fabs(front1->val - target) < eps) {
          ret = front1->val;
          eps = fabs(front1->val - target);
        }
        if (front2 != NULL && fabs(front2->val - target) < eps) {
          ret = front2->val;
          eps = fabs(front2->val - target);
        }
      }
    }
    return ret;
  }
};