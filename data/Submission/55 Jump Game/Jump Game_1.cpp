//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 55 Jump Game
// https://leetcode.com//problems/jump-game/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 13 ms
// This solution defeats 26.69% cpp solutions

class Solution {
 public:
  bool canJump(vector<int>& nums) {
    if (nums.size() < 2) {
      return true;
    }
    int i = 0;
    while (i < nums.size() - 1) {
      int max = 0;
      int steps = nums[i];
      int start = i;
      if (start < nums.size() - 1 && steps == 0) {
        return false;
      }
      if (steps + start >= nums.size() - 1) {
        return true;
      }
      for (int j = i; j <= steps + start; j++) {
        if (j < nums.size() && nums[j] + j > max) {
          i = j;
          max = nums[j] + j;
        }
      }
      if (i == start) {
        return false;
      }
    }
    return true;
  }
};