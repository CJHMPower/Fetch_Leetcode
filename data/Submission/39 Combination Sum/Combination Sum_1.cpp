//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 39 Combination Sum
// https://leetcode.com//problems/combination-sum/description/
// Fetched at 2018-07-24
// Submitted 3 months ago
// Runtime: 16 ms
// This solution defeats 16.48% cpp solutions

class Solution {
 public:
  void backtrace(vector<int>& candidates, vector<int>& nums, int target,
                 vector<vector<int>>& ret) {
    if (target < 0) {
      return;
    }
    if (target == 0) {
      ret.push_back(nums);
      return;
    }

    for (int i = 0; i < candidates.size(); i++) {
      if (nums.empty() || candidates[i] >= nums.back()) {
        nums.push_back(candidates[i]);
        backtrace(candidates, nums, target - candidates[i], ret);
        nums.pop_back();
      }
    }
  }
  vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
    vector<vector<int>> ret;
    vector<int> nums;
    backtrace(candidates, nums, target, ret);
    return ret;
  }
};