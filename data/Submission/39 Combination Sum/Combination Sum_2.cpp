//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 39 Combination Sum
// https://leetcode.com//problems/combination-sum/description/
// Fetched at 2018-07-24
// Submitted 5 months ago
// Runtime: 128 ms
// This solution defeats 1.17% cpp solutions

class Solution {
 public:
  vector<priority_queue<int>> helper(vector<int>& nums, int target) {
    vector<priority_queue<int>> ret;

    vector<priority_queue<int>> temp;
    for (int i = 0; i < nums.size(); i++) {
      if (target - nums[i] > 0) {
        temp = helper(nums, target - nums[i]);
        for (auto v : temp) {
          v.push(nums[i]);
          ret.push_back(v);
        }
      } else if (target == nums[i]) {
        priority_queue<int> q;
        q.push(target);
        ret.push_back(q);
      } else {
        break;
      }
    }
    return ret;
  }
  vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
    sort(candidates.begin(), candidates.end());
    vector<priority_queue<int>> temp = helper(candidates, target);
    vector<vector<int>> ret;
    set<vector<int>> record;
    for (auto v : temp) {
      vector<int> vec;
      while (!v.empty()) {
        vec.push_back(v.top());
        v.pop();
      }
      if (record.find(vec) == record.end()) {
        ret.push_back(vec);
        record.insert(vec);
      }
    }
    return ret;
  }
};