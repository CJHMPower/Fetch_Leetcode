//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 51 N-Queens
// https://leetcode.com//problems/n-queens/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 12 ms
// This solution defeats 13.35% cpp solutions

class Solution {
 public:
  vector<int> queen;
  bool isvalid(int row, int col) {
    for (int i = 0; i < queen.size(); i++) {
      if (col == queen[i] || abs(i - row) == abs(col - queen[i])) {
        return false;
      }
    }
    return true;
  }
  vector<string> chess() {
    vector<string> result;
    string temp(queen.size(), '.');
    for (int i = 0; i < queen.size(); i++) {
      result.push_back(temp);
      result[i][queen[i]] = 'Q';
    }
    return result;
  }
  vector<vector<string>> solveNQueens(int n) {
    vector<vector<string>> result;
    for (int k = 0; k < n; k++) {
      queen.push_back(INT_MIN);
    }
    int i = 0, j = 0;
    while (i < n) {
      while (j < n) {
        if (isvalid(i, j) == true) {
          queen[i] = j;
          j = 0;
          break;
        } else {
          j++;
        }
      }
      if (queen[i] == INT_MIN) {
        if (i == 0) {
          break;
        } else {
          i--;
          j = queen[i] + 1;
          queen[i] = INT_MIN;
          continue;
        }
      }
      if (i == n - 1) {
        result.push_back(chess());
        j = queen[i] + 1;
        queen[i] = INT_MIN;
        continue;
      }
      i++;
    }
    return result;
  }
};