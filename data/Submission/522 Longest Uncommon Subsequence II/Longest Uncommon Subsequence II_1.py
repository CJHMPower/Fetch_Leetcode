#-*- coding:utf-8 -*-
#Generated by the Fetch-Leetcode project on the Github
#https://github.com/CJHMPower/Fetch-Leetcode/

#522 Longest Uncommon Subsequence II
#https://leetcode.com//problems/longest-uncommon-subsequence-ii/description/
#Fetched at 2018-07-24
#Submitted 1 year, 1 month ago
#Runtime: 66 ms
#This solution defeats 6.67% python solutions


class Solution(object):
    def is_subsequence(self, a, b):

        if len(a) > len(b):

            return False

        elif len(a) == 0 or a == b:

            return True

        head = a[0]

        idx = b.find(head)

        if idx == -1:

            return False

        else:

            return self.is_subsequence(a[1:], b[idx + 1:])

    def findLUSlength(self, strs):
        """

        :type strs: List[str]

        :rtype: int

        """

        str_counter = {str: strs.count(str) for str in strs}

        unique = []

        not_unique = []

        for str in str_counter:

            if str_counter[str] > 1:

                not_unique.append(str)

            else:

                unique.append(str)

        unique = sorted(unique, key=lambda x: len(x), reverse=True)

        for str in unique:

            flag = True

            for s in not_unique:

                if self.is_subsequence(str, s):

                    flag = False

            if flag == True:

                return len(str)

        return -1
