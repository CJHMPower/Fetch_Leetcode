//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 320 Generalized Abbreviation
// https://leetcode.com//problems/generalized-abbreviation/description/
// Fetched at 2018-07-24
// Submitted 3 months ago
// Runtime: 83 ms
// This solution defeats 3.02% cpp solutions

class Solution {
 public:
  void backtrace(int num, vector<vector<int>>& ret) {
    int n = ret.size();
    for (int i = 0; i < n; i++) {
      vector<int> temp = ret[i];
      temp.push_back(num);
      ret.push_back(temp);
    }
  }

  string abbrev(vector<int>& nums, string word) {
    string ret = "";
    if (nums.empty()) {
      return word;
    }
    for (auto c : nums) {
      word[c - 1] = ' ';
    }
    int i = 0;
    int num = 0;
    while (i < word.size()) {
      num = 0;
      while (i < word.size() && word[i] == ' ') {
        num++;
        i++;
      }
      if (i < word.size()) {
        if (num > 0) {
          ret = ret + to_string(num);
        }

        ret.push_back(word[i]);
      } else if (num > 0) {
        ret = ret + to_string(num);
      }
      i++;
    }

    return ret;
  }
  vector<string> generateAbbreviations(string word) {
    vector<vector<int>> subset;
    subset.push_back(vector<int>());
    for (int i = 1; i <= word.size(); i++) {
      backtrace(i, subset);
    }
    vector<string> ret;
    for (int i = 0; i < subset.size(); i++) {
      ret.push_back(abbrev(subset[i], word));
    }

    return ret;
  }
};