#-*- coding:utf-8 -*-
#Generated by the Fetch-Leetcode project on the Github
#https://github.com/CJHMPower/Fetch-Leetcode/

#443 String Compression
#https://leetcode.com//problems/string-compression/description/
#Fetched at 2018-07-24
#Submitted 5 months, 1 week ago
#Runtime: 109 ms
#This solution defeats 2.09% python solutions


class Solution(object):
    def digits(self, n):
        return list(str(n))

    def compress(self, chars):
        """
        :type chars: List[str]
        :rtype: int
        """
        sorted(chars)
        low = 0
        high = 0
        while (high < len(chars)):
            while (high < len(chars) and chars[low] == chars[high]):
                high += 1

            d = self.digits(high - low)
            if (high - low > 1):
                for i in range(len(d)):
                    chars[low + i + 1] = d[i]
                for i in range(low + len(d) + 1, high):
                    chars.pop(low + len(d) + 1)
                high -= (high - low - 1) - len(d)
            low = high
        return len(chars)
