//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 652 Find Duplicate Subtrees
// https://leetcode.com//problems/find-duplicate-subtrees/description/
// Fetched at 2018-07-24
// Submitted 1 month ago
// Runtime: 32 ms
// This solution defeats 16.08% cpp solutions

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
 public:
  string HashCode(TreeNode* root, set<string>& hash, set<string>& pushed,
                  vector<TreeNode*>& ret) {
    if (root == NULL) return "";
    string hashCode = to_string(root->val) + "l" +
                      HashCode(root->left, hash, pushed, ret) + "r" +
                      HashCode(root->right, hash, pushed, ret);
    if (hash.find(hashCode) != hash.end() &&
        pushed.find(hashCode) == pushed.end()) {
      pushed.insert(hashCode);
      ret.push_back(root);
    } else
      hash.insert(hashCode);
    return hashCode;
  }

  vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
    vector<TreeNode*> ret;
    set<string> hash;
    set<string> pushed;
    HashCode(root, hash, pushed, ret);
    return ret;
  }
};