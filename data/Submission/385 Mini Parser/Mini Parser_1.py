#-*- coding:utf-8 -*-
#Generated by the Fetch-Leetcode project on the Github
#https://github.com/CJHMPower/Fetch-Leetcode/

#385 Mini Parser
#https://leetcode.com//problems/mini-parser/description/
#Fetched at 2018-07-24
#Submitted 1 year, 10 months ago
#Runtime: 178 ms
#This solution defeats 3.67% python solutions

# """

# This is the interface that allows for creating nested lists.

# You should not implement it, or speculate about its implementation

# """

#class NestedInteger(object):

#    def __init__(self, value=None):

#        """

#        If value is not specified, initializes an empty list.

#        Otherwise initializes a single integer equal to value.

#        """

#

#    def isInteger(self):

#        """

#        @return True if this NestedInteger holds a single integer, rather than a nested list.

#        :rtype bool

#        """

#

#    def add(self, elem):

#        """

#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.

#        :rtype void

#        """

#

#    def setInteger(self, value):

#        """

#        Set this NestedInteger to hold a single integer equal to value.

#        :rtype void

#        """

#

#    def getInteger(self):

#        """

#        @return the single integer that this NestedInteger holds, if it holds a single integer

#        Return None if this NestedInteger holds a nested list

#        :rtype int

#        """

#

#    def getList(self):

#        """

#        @return the nested list that this NestedInteger holds, if it holds a nested list

#        Return None if this NestedInteger holds a single integer

#        :rtype List[NestedInteger]

#        """


class Solution(object):
    def core(self, data):

        if isinstance(data, list):

            ret = NestedInteger()

            for li in data:

                ret.add(self.core(li))

            return ret

        else:

            return NestedInteger(data)

    def deserialize(self, s):
        """

        :type s: str

        :rtype: NestedInteger

        """

        data = eval(s)

        return self.core(data)
