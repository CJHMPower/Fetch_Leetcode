//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 16 3Sum Closest
// https://leetcode.com//problems/3sum-closest/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 32 ms
// This solution defeats 9.82% cpp solutions

class Solution {
 public:
  int threeSumClosest(vector<int>& nums, int target) {
    sort(nums.begin(), nums.end());
    int sum, tsum;
    int err = INT_MAX;
    int low, high;
    for (int i = 0; i < nums.size(); i++) {
      if (i > 0 && nums[i] == nums[i - 1]) {
        continue;
      }
      low = i + 1;
      high = nums.size() - 1;
      if (!(high > low)) {
        break;
      }
      while (high > low) {
        if (nums[low] + nums[high] + nums[i] - target == 0) {
          return target;
        }
        if (abs(nums[low] + nums[high] + nums[i] - target) < err) {
          sum = nums[low] + nums[high] + nums[i];
          err = abs(sum - target);
        } else if (nums[low] + nums[high] + nums[i] - target < 0) {
          low++;
        } else {
          high--;
        }
      }
      cout << sum << "~" << endl;
    }
    return sum;
  }
};