// -*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 247 Strobogrammatic Number II
// https://leetcode.com//problems/strobogrammatic-number-ii/description/
// Fetched at 2018-07-24
// Submitted 1 month, 3 weeks ago
// Runtime: 40 ms
// This solution defeats 4.16% java solutions

class Solution {
  public static final ArrayList<String> one = new ArrayList<String>(Arrays.asList("0", "1", "8"));
  public static final ArrayList<String> two =
      new ArrayList<String>(Arrays.asList("11", "69", "88", "96"));
  public static final ArrayList<String> two_include =
      new ArrayList<String>(Arrays.asList("00", "11", "69", "88", "96"));

  public List<String> findStro(int n, boolean include0) {
    if (n == 1) {
      return one;
    }
    if (n == 2) {
      if (include0) {
        return two_include;
      } else {
        return two;
      }
    }
    List<String> temp = findStro(n - 2, include0);
    List<String> ret = new ArrayList<String>();
    for (String s : temp) {
      for (String t : two_include) {
        ret.add(t.charAt(0) + s + t.charAt(1));
      }
    }
    return ret;
  }

  public List<String> findStrobogrammatic(int n) {
    if (n == 1) {
      return one;
    }
    if (n == 2) {
      return two;
    }
    List<String> temp = findStro(n - 2, true);

    List<String> ret = new ArrayList<String>();
    for (String s : temp) {
      for (String t : two) {
        ret.add(t.charAt(0) + s + t.charAt(1));
      }
    }
    return ret;
  }
}
