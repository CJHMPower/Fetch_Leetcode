//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 40 Combination Sum II
// https://leetcode.com//problems/combination-sum-ii/description/
// Fetched at 2018-07-24
// Submitted 3 months ago
// Runtime: 19 ms
// This solution defeats 10.41% cpp solutions

class Solution {
 public:
  void backtrace(vector<int>& candidates, vector<int>& nums, int target,
                 vector<vector<int>>& ret, map<int, int>& used) {
    if (target < 0) {
      return;
    }
    if (target == 0) {
      ret.push_back(nums);
      return;
    }
    for (auto it = used.begin(); it != used.end(); it++) {
      if (used[it->first] > 0 && (nums.empty() || it->first >= nums.back())) {
        used[it->first]--;
        nums.push_back(it->first);
        backtrace(candidates, nums, target - it->first, ret, used);
        used[it->first]++;
        nums.pop_back();
      }
    }
  }
  vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
    map<int, int> used;
    for (auto c : candidates) {
      if (used.find(c) == used.end()) used[c] = 0;
      used[c]++;
    }
    vector<vector<int>> ret;
    vector<int> nums;
    backtrace(candidates, nums, target, ret, used);
    return ret;
  }
};