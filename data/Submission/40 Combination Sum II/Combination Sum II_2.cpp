//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 40 Combination Sum II
// https://leetcode.com//problems/combination-sum-ii/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 203 ms

class Solution {
 public:
  vector<vector<int>> helper(vector<int>& candidates, int target) {
    vector<vector<int>> result;
    if (target == 0) {
      result.push_back(vector<int>());
      return result;
    }
    if (candidates.empty()) {
      return result;
    }
    if (target < candidates[0]) {
      return result;
    }
    while (!candidates.empty()) {
      int v = candidates[0];
      candidates.erase(candidates.begin());
      vector<int> tt = candidates;
      vector<vector<int>> temp = helper(tt, target - v);
      for (auto u : temp) {
        u.insert(u.begin(), v);
        result.push_back(u);
      }
    }
    return result;
  }
  vector<vector<int>> combinationSum2(vector<int> candidates, int target) {
    sort(candidates.begin(), candidates.end());
    vector<vector<int>> result = helper(candidates, target);
    sort(result.begin(), result.end());
    auto it = unique(result.begin(), result.end());
    result.erase(it, result.end());
    return result;
  }
};