//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 721 Accounts Merge
// https://leetcode.com//problems/accounts-merge/description/
// Fetched at 2018-07-24
// Submitted 2 months, 3 weeks ago
// Runtime: 137 ms
// This solution defeats 45.45% cpp solutions

class Solution {
 public:
  void DFS(vector<vector<int>>& adjects, vector<vector<string>>& accounts,
           int start, vector<bool>& visited, vector<vector<string>>& ret) {
    visited[start] = true;

    for (int i = 0; i < adjects[start].size(); i++) {
      if (visited[adjects[start][i]] == false) {
        for (int j = 1; j < accounts[adjects[start][i]].size(); j++) {
          ret[ret.size() - 1].push_back(accounts[adjects[start][i]][j]);
        }
        DFS(adjects, accounts, adjects[start][i], visited, ret);
      }
    }
  }
  vector<vector<string>> MergeName(vector<vector<string>>& accounts) {
    map<string, vector<int>> record;
    int n = accounts.size();
    vector<vector<int>> adjects(n, vector<int>());

    vector<vector<string>> ret;
    for (int i = 0; i < n; i++) {
      for (int j = 1; j < accounts[i].size(); j++) {
        if (record.find(accounts[i][j]) == record.end())
          record[accounts[i][j]] = vector<int>();
        for (auto a : record[accounts[i][j]]) {
          adjects[a].push_back(i);
          adjects[i].push_back(a);
        }
        record[accounts[i][j]].push_back(i);
      }
    }
    vector<bool> visited(n, false);
    for (int i = 0; i < n; i++) {
      if (visited[i] == false) {
        ret.push_back(accounts[i]);
        DFS(adjects, accounts, i, visited, ret);
        sort(ret[ret.size() - 1].begin(), ret[ret.size() - 1].end());
        auto iter =
            unique(ret[ret.size() - 1].begin(), ret[ret.size() - 1].end());
        ret[ret.size() - 1].erase(iter, ret[ret.size() - 1].end());
      }
    }
    return ret;
  }
  vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
    return MergeName(accounts);
  }
};