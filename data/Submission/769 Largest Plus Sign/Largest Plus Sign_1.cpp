//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 769 Largest Plus Sign
// https://leetcode.com//problems/largest-plus-sign/description/
// Fetched at 2018-07-24
// Submitted 1 month, 1 week ago
// Runtime: 228 ms
// This solution defeats 21.39% cpp solutions

class Solution {
 public:
  int orderOfLargestPlusSign(int N, vector<vector<int>>& mines) {
    vector<vector<int>> matrix(N, vector<int>(N, 1));
    for (auto a : mines) matrix[a[0]][a[1]] = 0;
    int ret = 0, counter = 0, left, right, up, down;
    for (int i = 0; i < N; i++) {
      for (int j = 0; j < N; j++) {
        if (matrix[i][j] == 1) {
          counter = 1;
          left = 1;
          right = 1;
          up = 1;
          down = 1;
          while (j - left >= 0 && matrix[i][j - left] == 1 && i - up >= 0 &&
                 matrix[i - up][j] == 1 && j + right < N &&
                 matrix[i][j + right] == 1 && i + down < N &&
                 matrix[i + down][j] == 1) {
            counter++;
            left++;
            right++;
            up++;
            down++;
          }
          ret = max(ret, counter);
          /* if(counter > ret){
              for(auto a: mines){
                  left = ret + 1;
                  right = ret + 1;
                  up = ret + 1;
                  down = ret + 1;
                  while(a[1] + right<N && right<= counter){
                      visited[a[0]][a[1]+right] = true;
                      right++;
                  }
                  while(a[1] - left>=0 && left<=counter){
                      visited[a[0]][a[1]-left] = true;
                      left++;
                  }
                  while(a[0] - up >=0 && up<=counter){
                      visited[a[0]-up][a[1]] = true;
                      up++;
                  }
                  while(a[0] + down<N && down<=counter){
                      visited[a[0]+down][a[1]] = true;
                      down++;
                  }
              }
              ret = counter;
          } */
        }
      }
    }
    return ret;
  }
};