//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 257 Binary Tree Paths
// https://leetcode.com//problems/binary-tree-paths/description/
// Fetched at 2018-07-24
// Submitted 2 years, 1 month ago
// Runtime: 4 ms
// This solution defeats 98.38% cpp solutions

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
 public:
  vector<string> binaryTreePaths(TreeNode* root) {
    vector<string> result;
    if (root == NULL) {
      return result;
    }
    if (root->left == NULL && root->right == NULL) {
      result.push_back(to_string(root->val));
    }
    vector<string> temp1 = binaryTreePaths(root->left);
    vector<string> temp2 = binaryTreePaths(root->right);
    if (!temp1.empty()) {
      for (string str : temp1) {
        str = "->" + str;
        str = to_string(root->val) + str;
        result.push_back(str);
      }
    }
    if (!temp2.empty()) {
      for (string str : temp2) {
        str = "->" + str;
        str = to_string(root->val) + str;
        result.push_back(str);
      }
    }
    return result;
  }
};