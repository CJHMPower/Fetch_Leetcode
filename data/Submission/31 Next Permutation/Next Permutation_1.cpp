//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 31 Next Permutation
// https://leetcode.com//problems/next-permutation/description/
// Fetched at 2018-07-24
// Submitted 2 years ago
// Runtime: 12 ms
// This solution defeats 3.24% cpp solutions

class Solution {
 public:
  void nextPermutation(vector<int>& nums) {
    if (nums.size() < 2) {
      return;
    }
    if (nums.size() == 2) {
      swap(nums[0], nums[1]);
      return;
    }
    int back = nums.size() - 1;
    int front = nums.size() - 2;
    while (front >= 0 && nums[front] >= nums[back]) {
      front--;
      back--;
    }
    if (front < 0) {
      reverse(nums.begin(), nums.end());
      return;
    }
    int next = back;
    for (int i = back; i < nums.size(); i++) {
      if (nums[i] > nums[front] && nums[i] < nums[next]) {
        next = i;
      }
    }
    swap(nums[front], nums[next]);
    sort(nums.begin() + back, nums.end());
  }
};