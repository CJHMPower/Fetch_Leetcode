//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 347 Top K Frequent Elements
// https://leetcode.com//problems/top-k-frequent-elements/description/
// Fetched at 2018-07-24
// Submitted 5 months ago
// Runtime: 24 ms
// This solution defeats 7.75% cpp solutions

class Solution {
 public:
  vector<int> topKFrequent(vector<int>& nums, int k) {
    map<int, int> hash;
    for (auto a : nums) {
      hash[a]++;
    }
    vector<pair<int, int>> temp;
    for (auto it = hash.begin(); it != hash.end(); it++) {
      temp.push_back(*it);
    }
    struct CMP {
      bool operator()(pair<int, int>& a, pair<int, int>& b) {
        return a.second > b.second;
      }
    };
    priority_queue<pair<int, int>, vector<pair<int, int>>, CMP> cmp;
    for (int i = 0; i < temp.size(); i++) {
      cmp.push(temp[i]);
      if (cmp.size() > k) {
        cmp.pop();
      }
    }
    vector<int> ret(k, 0);
    int i = 0;
    while (!cmp.empty()) {
      auto v = cmp.top();
      cmp.pop();
      ret[k - i - 1] = v.first;
      i++;
    }

    return ret;
  }
};