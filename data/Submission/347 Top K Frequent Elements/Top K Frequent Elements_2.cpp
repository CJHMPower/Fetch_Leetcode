//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 347 Top K Frequent Elements
// https://leetcode.com//problems/top-k-frequent-elements/description/
// Fetched at 2018-07-24
// Submitted 2 years, 2 months ago
// Runtime: 68 ms
// This solution defeats 2.13% cpp solutions

class Solution {
 public:
  vector<int> topKFrequent(vector<int>& nums, int k) {
    vector<int> result;
    vector<pair<int, int>> frequency;
    sort(nums.begin(), nums.end());
    frequency.push_back({nums[0], 1});
    for (int i = 1; i < nums.size(); i++) {
      if (nums[i] != frequency[frequency.size() - 1].first) {
        frequency.push_back({nums[i], 1});
      } else {
        frequency[frequency.size() - 1].second++;
      }
    }
    int times = 0;
    int heapsize = frequency.size();
    while (times < k) {
      for (int i = (frequency.size() + times) / 2; i >= times; i--) {
        if (2 * i + 1 - times < frequency.size() &&
            frequency[2 * i + 1 - times].second > frequency[i].second) {
          swap(frequency[2 * i + 1 - times], frequency[i]);
        }
        if (2 * i + 2 - times < frequency.size() &&
            frequency[2 * i + 2 - times].second > frequency[i].second) {
          swap(frequency[2 * i + 2 - times], frequency[i]);
        }
      }
      result.push_back(frequency[times].first);
      times++;
    }
    return result;
  }
};