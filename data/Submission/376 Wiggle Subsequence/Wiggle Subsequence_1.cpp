//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 376 Wiggle Subsequence
// https://leetcode.com//problems/wiggle-subsequence/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 16 ms

class Solution {
 public:
  int wiggleMaxLength(vector<int>& nums) {
    if (nums.empty()) {
      return 0;
    }
    if (nums.size() < 2) {
      return 1;
    }
    vector<int> dp(nums.size(), 1);
    vector<int> trend(nums.size(), 0);
    for (int i = 1; i < nums.size(); i++) {
      for (int j = 0; j < i; j++) {
        if (((nums[i] - nums[j]) * trend[j] < 0 ||
             trend[j] == 0 && nums[i] != nums[j]) &&
            dp[i] < dp[j] + 1) {
          dp[i] = dp[j] + 1;
          trend[i] = nums[i] - nums[j];
        }
      }
    }
    int max = 1;
    for (auto v : dp) {
      if (v > max) {
        max = v;
      }
    }
    return max;
  }
};