//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 439 Ternary Expression Parser
// https://leetcode.com//problems/ternary-expression-parser/description/
// Fetched at 2018-07-24
// Submitted 4 months ago
// Runtime: 10 ms
// This solution defeats 15.91% cpp solutions

class Solution {
 public:
  string parseTernary(string expression) {
    if (expression.empty()) {
      return "";
    }
    stack<char> exp;
    stack<char> temp;
    char t;

    for (int i = expression.size() - 1; i >= 0; i--) {
      if (expression[i] != '?') {
        exp.push(expression[i]);
      } else {
        char first = exp.top();
        exp.pop();
        exp.pop();
        char second = exp.top();
        exp.pop();
        i--;
        if (expression[i] == 'T') {
          exp.push(first);
        } else {
          exp.push(second);
        }
      }
    }
    return string(1, exp.top());
  }
};