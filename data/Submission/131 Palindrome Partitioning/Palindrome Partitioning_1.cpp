//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 131 Palindrome Partitioning
// https://leetcode.com//problems/palindrome-partitioning/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 9 ms
// This solution defeats 32.54% cpp solutions

class Solution {
 public:
  bool is_palindrome(string &s, int start, int end) {
    while (start < end) {
      if (s[start++] != s[end--]) {
        return false;
      }
    }
    return true;
  }
  void backtrack(int index, string &s, vector<string> &path,
                 vector<vector<string>> &ret) {
    if (index == s.size()) {
      ret.push_back(path);
      return;
    }
    for (int i = index; i < s.size(); i++) {
      if (is_palindrome(s, index, i) == true) {
        path.push_back(s.substr(index, i - index + 1));
        backtrack(i + 1, s, path, ret);
        path.pop_back();
      }
    }
  }
  vector<vector<string>> partition(string s) {
    vector<vector<string>> ret;
    vector<string> path;
    backtrack(0, s, path, ret);
    return ret;
  }
};