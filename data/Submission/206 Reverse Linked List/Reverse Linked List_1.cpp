//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 206 Reverse Linked List
// https://leetcode.com//problems/reverse-linked-list/description/
// Fetched at 2018-07-24
// Submitted 5 months, 1 week ago
// Runtime: 10 ms
// This solution defeats 2.9% cpp solutions

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
 public:
  pair<ListNode *, ListNode *> reverseHead(ListNode *head, ListNode *tail) {
    if (head == NULL || head == tail) {
      return make_pair(head, tail);
    }
    pair<ListNode *, ListNode *> new_pointer = reverseHead(head->next, tail);
    ListNode *new_head = new_pointer.first;
    ListNode *new_tail = new_pointer.second;
    head->next = NULL;
    new_tail->next = head;
    new_tail = head;
    pair<ListNode *, ListNode *> ret;
    ret = {new_head, new_tail};
    return ret;
  }
  ListNode *reverseList(ListNode *head) {
    if (head == NULL) {
      return head;
    }
    ListNode *tail = head;
    while (tail->next != NULL) {
      tail = tail->next;
    }
    pair<ListNode *, ListNode *> ret = reverseHead(head, tail);
    return ret.first;
  }
};