//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 1 Two Sum
// https://leetcode.com//problems/two-sum/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 13 ms
// This solution defeats 41.14% cpp solutions

class Solution {
 public:
  int binary_search(vector<pair<int, int>>& nums, int low, int high,
                    int target) {
    while (low <= high) {
      int mid = low + (high - low) / 2;
      if (nums[mid].second == target) {
        return nums[mid].first;
      } else if (nums[mid].second < target) {
        low = mid + 1;
      } else {
        high = mid - 1;
      }
    }
    return -1;
  }
  vector<int> twoSum(vector<int>& nums, int target) {
    vector<pair<int, int>> hash;
    for (int i = 0; i < nums.size(); i++) {
      hash.push_back({i, nums[i]});
    }
    auto cmp = [](pair<int, int> a, pair<int, int> b) {
      return a.second < b.second;
    };
    sort(hash.begin(), hash.end(), cmp);
    for (int i = 0; i < hash.size(); i++) {
      int b = binary_search(hash, 0, hash.size() - 1, target - hash[i].second);
      if (b > 0 && b != hash[i].first) {
        return {hash[i].first, b};
      }
    }
    return {-1, -1};
  }
};