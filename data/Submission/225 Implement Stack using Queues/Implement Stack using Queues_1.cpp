//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 225 Implement Stack using Queues
// https://leetcode.com//problems/implement-stack-using-queues/description/
// Fetched at 2018-07-24
// Submitted 2 years, 1 month ago
// Runtime: 4 ms

class Stack {
 public:
  // Push element x onto stack.
  void push(int x) {
    if (!que1.empty()) {
      que1.push(x);
    } else {
      que2.push(x);
    }
  }

  // Removes the element on top of the stack.
  void pop() {
    if (!(*this).empty()) {
      if (!que1.empty()) {
        while (que1.size() > 1) {
          int temp = que1.front();
          que1.pop();
          que2.push(temp);
        }
        que1.pop();
      } else {
        while (que2.size() > 1) {
          int temp = que2.front();
          que2.pop();
          que1.push(temp);
        }
        que2.pop();
      }
    }
  }

  // Get the top element.
  int top() {
    if (!(*this).empty()) {
      if (!que1.empty()) {
        while (que1.size() > 1) {
          int temp = que1.front();
          que1.pop();
          que2.push(temp);
        }
        int temp = que1.front();
        que1.pop();
        que2.push(temp);
        return temp;
      } else {
        while (que2.size() > 1) {
          int temp = que2.front();
          que2.pop();
          que1.push(temp);
        }
        int temp = que2.front();
        que2.pop();
        que1.push(temp);
        return temp;
      }
    }
    return 0;
  }

  // Return whether the stack is empty.
  bool empty() { return que1.empty() && que2.empty(); }
  queue<int> que1;
  queue<int> que2;
};