//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 138 Copy List with Random Pointer
// https://leetcode.com//problems/copy-list-with-random-pointer/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 155 ms

/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
 public:
  unordered_map<RandomListNode *, RandomListNode *> mem;
  RandomListNode *copyRandomList(RandomListNode *head) {
    if (head == nullptr) {
      return nullptr;
    }
    if (mem.find(head) != mem.end()) {
      return mem[head];
    }
    mem[head] = new RandomListNode(head->label);
    mem[head]->next = copyRandomList(head->next);
    mem[head]->random = copyRandomList(head->random);
    return mem[head];
  }
};