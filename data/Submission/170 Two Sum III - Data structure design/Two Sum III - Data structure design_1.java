// -*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 170 Two Sum III - Data structure design
// https://leetcode.com//problems/two-sum-iii---data-structure-design/description/
// Fetched at 2018-07-24
// Submitted 1 month, 3 weeks ago
// Runtime: 160 ms
// This solution defeats 64.68% java solutions

class TwoSum {
  HashMap<Integer, Integer> map;
  /** Initialize your data structure here. */
  public TwoSum() {
    map = new HashMap<Integer, Integer>();
  }

  /** Add the number to an internal data structure.. */
  public void add(int number) {
    if (map.containsKey(number)) {
      map.put(number, 2);
    } else {
      map.put(number, 1);
    }
  }

  /** Find if there exists any pair of numbers which sum is equal to the value. */
  public boolean find(int value) {
    for (Integer a : map.keySet()) {
      if ((a * 2 == value && map.get(a) == 2) || ((value - a) != a && map.containsKey(value - a))) {
        return true;
      }
    }
    return false;
  }
}

/**
 * Your TwoSum object will be instantiated and called as such: TwoSum obj = new TwoSum();
 * obj.add(number); boolean param_2 = obj.find(value);
 */
