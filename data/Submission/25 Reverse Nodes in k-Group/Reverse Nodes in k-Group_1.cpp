//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 25 Reverse Nodes in k-Group
// https://leetcode.com//problems/reverse-nodes-in-k-group/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 23 ms
// This solution defeats 4.34% cpp solutions

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
 public:
  ListNode* reverseKGroup(ListNode* head, int k) {
    if (head == nullptr || head->next == nullptr) {
      return head;
    }
    ListNode* p = head;
    ListNode* q = head;
    for (int i = 0; i < k - 1; i++) {
      p = p->next;
      if (p == nullptr) {
        return head;
      }
    }
    head = p;
    p = q;
    ListNode* pre = nullptr;
    ListNode* back = nullptr;
    ListNode* temp = q;
    ListNode* btemp = nullptr;
    while (q) {
      for (int i = 0; i < k - 1; i++) {
        q = q->next;
        if (q == nullptr) {
          break;
        }
      }
      pre = p;
      back = pre->next;
      if (q == nullptr) {
        break;
      }
      temp = q->next;
      ListNode* nextf = temp;
      for (int i = 0; i < k - 1; i++) {
        if (nextf == nullptr) {
          nextf = temp;
          break;
        }
        nextf = nextf->next;
      }
      if (temp != nullptr && nextf == nullptr) {
        nextf = temp;
      }
      pre->next = nextf;
      while (pre != q) {
        btemp = back->next;
        back->next = pre;
        pre = back;
        back = btemp;
      }
      p = temp;
      q = p;
    }
    return head;
  }
};