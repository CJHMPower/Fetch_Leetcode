//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 209 Minimum Size Subarray Sum
// https://leetcode.com//problems/minimum-size-subarray-sum/description/
// Fetched at 2018-07-24
// Submitted 2 years, 1 month ago
// Runtime: 8 ms
// This solution defeats 98.63% cpp solutions

class Solution {
 public:
  int minSubArrayLen(int s, vector<int>& nums) {
    int total = accumulate(nums.begin(), nums.end(), 0);
    if (total < s) {
      return 0;
    }
    int i = 0, j = 0, sum = 0, minlen = nums.size();
    while (j < nums.size()) {
      while (j < nums.size() && sum < s) {
        sum += nums[j];
        j++;
      }
      while (i < j && sum >= s) {
        sum -= nums[i];
        i++;
      }
      minlen = min(minlen, j - i + 1);
    }
    return minlen;
  }
};