//-*- coding:utf-8 -*-
// Generated by the Fetch-Leetcode project on the Github
// https://github.com/CJHMPower/Fetch-Leetcode/

// 99 Recover Binary Search Tree
// https://leetcode.com//problems/recover-binary-search-tree/description/
// Fetched at 2018-07-24
// Submitted 1 year, 10 months ago
// Runtime: 72 ms

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
 public:
  vector<int> data;
  void recover(TreeNode* root) {
    if (root == nullptr) {
      return;
    }
    recover(root->left);
    root->val = data.back();
    data.pop_back();
    recover(root->right);
  }
  void visit(TreeNode* root) {
    if (root == nullptr) {
      return;
    }
    visit(root->left);
    data.push_back(root->val);
    visit(root->right);
  }
  void recoverTree(TreeNode* root) {
    visit(root);
    auto cmp = [](int a, int b) { return a > b; };
    sort(data.begin(), data.end(), cmp);
    recover(root);
  }
};